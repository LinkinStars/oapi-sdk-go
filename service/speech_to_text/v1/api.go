// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go"
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
)

type Service struct {
	conf    lark.Config
	Speechs *SpeechService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Speechs = newSpeechService(s)
	return s
}

type SpeechService struct {
	service *Service
}

func newSpeechService(service *Service) *SpeechService {
	return &SpeechService{
		service: service,
	}
}

type SpeechFileRecognizeReqCall struct {
	ctx     *lark.Context
	speechs *SpeechService
	body    *SpeechFileRecognizeReqBody
	opts    []lark.APIRequestOpt
}

func (rc *SpeechFileRecognizeReqCall) Do() (*SpeechFileRecognizeResult, error) {
	var result = &SpeechFileRecognizeResult{}
	req := request.NewRequest("/open-apis/speech_to_text/v1/speech/file_recognize", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.speechs.service.conf, req)
	return result, err
}

func (speechs *SpeechService) FileRecognize(ctx *lark.Context, body *SpeechFileRecognizeReqBody, opts ...lark.APIRequestOpt) *SpeechFileRecognizeReqCall {
	return &SpeechFileRecognizeReqCall{
		ctx:     ctx,
		speechs: speechs,
		body:    body,
		opts:    opts,
	}
}

type SpeechStreamRecognizeReqCall struct {
	ctx     *lark.Context
	speechs *SpeechService
	body    *SpeechStreamRecognizeReqBody
	opts    []lark.APIRequestOpt
}

func (rc *SpeechStreamRecognizeReqCall) Do() (*SpeechStreamRecognizeResult, error) {
	var result = &SpeechStreamRecognizeResult{}
	req := request.NewRequest("/open-apis/speech_to_text/v1/speech/stream_recognize", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.speechs.service.conf, req)
	return result, err
}

func (speechs *SpeechService) StreamRecognize(ctx *lark.Context, body *SpeechStreamRecognizeReqBody, opts ...lark.APIRequestOpt) *SpeechStreamRecognizeReqCall {
	return &SpeechStreamRecognizeReqCall{
		ctx:     ctx,
		speechs: speechs,
		body:    body,
		opts:    opts,
	}
}
