// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go"
)

type Service struct {
	conf    lark.Config
	Files   *FileService
	Folders *FolderService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Files = newFileService(s)
	s.Folders = newFolderService(s)
	return s
}

type FileService struct {
	service *Service
}

func newFileService(service *Service) *FileService {
	return &FileService{
		service: service,
	}
}

type FolderService struct {
	service *Service
}

func newFolderService(service *Service) *FolderService {
	return &FolderService{
		service: service,
	}
}

type FolderChildrenReqCall struct {
	ctx         *lark.Context
	folders     *FolderService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *FolderChildrenReqCall) SetFolderToken(folderToken string) {
	rc.pathParams["folderToken"] = folderToken
}
func (rc *FolderChildrenReqCall) SetTypes(types ...string) {
	rc.queryParams["types"] = types
}

func (rc *FolderChildrenReqCall) Do() (*FolderChildrenResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, lark.SetQueryParams(rc.queryParams))
	var result = &FolderChildrenResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/folder/:folderToken/children", "GET",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.folders.service.conf, req)
	return result, err
}

func (folders *FolderService) Children(ctx *lark.Context, opts ...lark.APIRequestOpt) *FolderChildrenReqCall {
	return &FolderChildrenReqCall{
		ctx:         ctx,
		folders:     folders,
		pathParams:  map[string]interface{}{},
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type FileCopyReqCall struct {
	ctx        *lark.Context
	files      *FileService
	body       *FileCopyReqBody
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FileCopyReqCall) SetFileToken(fileToken string) {
	rc.pathParams["fileToken"] = fileToken
}

func (rc *FileCopyReqCall) Do() (*FileCopyResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FileCopyResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/file/copy/files/:fileToken", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.files.service.conf, req)
	return result, err
}

func (files *FileService) Copy(ctx *lark.Context, body *FileCopyReqBody, opts ...lark.APIRequestOpt) *FileCopyReqCall {
	return &FileCopyReqCall{
		ctx:        ctx,
		files:      files,
		body:       body,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type FolderCreateReqCall struct {
	ctx        *lark.Context
	folders    *FolderService
	body       *FolderCreateReqBody
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FolderCreateReqCall) SetFolderToken(folderToken string) {
	rc.pathParams["folderToken"] = folderToken
}

func (rc *FolderCreateReqCall) Do() (*FolderCreateResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FolderCreateResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/folder/:folderToken", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.folders.service.conf, req)
	return result, err
}

func (folders *FolderService) Create(ctx *lark.Context, body *FolderCreateReqBody, opts ...lark.APIRequestOpt) *FolderCreateReqCall {
	return &FolderCreateReqCall{
		ctx:        ctx,
		folders:    folders,
		body:       body,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type FileCreateReqCall struct {
	ctx        *lark.Context
	files      *FileService
	body       *FileCreateReqBody
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FileCreateReqCall) SetFolderToken(folderToken string) {
	rc.pathParams["folderToken"] = folderToken
}

func (rc *FileCreateReqCall) Do() (*FileCreateResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FileCreateResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/file/:folderToken", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.files.service.conf, req)
	return result, err
}

func (files *FileService) Create(ctx *lark.Context, body *FileCreateReqBody, opts ...lark.APIRequestOpt) *FileCreateReqCall {
	return &FileCreateReqCall{
		ctx:        ctx,
		files:      files,
		body:       body,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type FileDocsDeleteReqCall struct {
	ctx        *lark.Context
	files      *FileService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FileDocsDeleteReqCall) SetDocToken(docToken string) {
	rc.pathParams["docToken"] = docToken
}

func (rc *FileDocsDeleteReqCall) Do() (*FileDocsDeleteResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FileDocsDeleteResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/file/docs/:docToken", "DELETE",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.files.service.conf, req)
	return result, err
}

func (files *FileService) DocsDelete(ctx *lark.Context, opts ...lark.APIRequestOpt) *FileDocsDeleteReqCall {
	return &FileDocsDeleteReqCall{
		ctx:        ctx,
		files:      files,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type FolderMetaReqCall struct {
	ctx        *lark.Context
	folders    *FolderService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FolderMetaReqCall) SetFolderToken(folderToken string) {
	rc.pathParams["folderToken"] = folderToken
}

func (rc *FolderMetaReqCall) Do() (*FolderMetaResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FolderMetaResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/folder/:folderToken/meta", "GET",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.folders.service.conf, req)
	return result, err
}

func (folders *FolderService) Meta(ctx *lark.Context, opts ...lark.APIRequestOpt) *FolderMetaReqCall {
	return &FolderMetaReqCall{
		ctx:        ctx,
		folders:    folders,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type FolderRootMetaReqCall struct {
	ctx     *lark.Context
	folders *FolderService
	opts    []lark.APIRequestOpt
}

func (rc *FolderRootMetaReqCall) Do() (*FolderRootMetaResult, error) {
	var result = &FolderRootMetaResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/root_folder/meta", "GET",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.folders.service.conf, req)
	return result, err
}

func (folders *FolderService) RootMeta(ctx *lark.Context, opts ...lark.APIRequestOpt) *FolderRootMetaReqCall {
	return &FolderRootMetaReqCall{
		ctx:     ctx,
		folders: folders,
		opts:    opts,
	}
}

type FileSpreadsheetsDeleteReqCall struct {
	ctx        *lark.Context
	files      *FileService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *FileSpreadsheetsDeleteReqCall) SetSpreadsheetToken(spreadsheetToken string) {
	rc.pathParams["spreadsheetToken"] = spreadsheetToken
}

func (rc *FileSpreadsheetsDeleteReqCall) Do() (*FileSpreadsheetsDeleteResult, error) {
	rc.opts = append(rc.opts, lark.SetPathParams(rc.pathParams))
	var result = &FileSpreadsheetsDeleteResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/explorer/v2/file/spreadsheets/:spreadsheetToken", "DELETE",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.files.service.conf, req)
	return result, err
}

func (files *FileService) SpreadsheetsDelete(ctx *lark.Context, opts ...lark.APIRequestOpt) *FileSpreadsheetsDeleteReqCall {
	return &FileSpreadsheetsDeleteReqCall{
		ctx:        ctx,
		files:      files,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}
