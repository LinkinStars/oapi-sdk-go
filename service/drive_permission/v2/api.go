// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go"
)

type Service struct {
	conf    lark.Config
	Publics *PublicService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Publics = newPublicService(s)
	return s
}

type PublicService struct {
	service *Service
}

func newPublicService(service *Service) *PublicService {
	return &PublicService{
		service: service,
	}
}

type PublicGetReqCall struct {
	ctx     *lark.Context
	publics *PublicService
	body    *PublicGetReqBody
	opts    []lark.APIRequestOpt
}

func (rc *PublicGetReqCall) Do() (*PublicGetResult, error) {
	var result = &PublicGetResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/permission/v2/public", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.publics.service.conf, req)
	return result, err
}

func (publics *PublicService) Get(ctx *lark.Context, body *PublicGetReqBody, opts ...lark.APIRequestOpt) *PublicGetReqCall {
	return &PublicGetReqCall{
		ctx:     ctx,
		publics: publics,
		body:    body,
		opts:    opts,
	}
}

type PublicUpdateReqCall struct {
	ctx     *lark.Context
	publics *PublicService
	body    *PublicUpdateReqBody
	opts    []lark.APIRequestOpt
}

func (rc *PublicUpdateReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/drive/permission/v2/public/update", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.publics.service.conf, req)
	return result, err
}

func (publics *PublicService) Update(ctx *lark.Context, body *PublicUpdateReqBody, opts ...lark.APIRequestOpt) *PublicUpdateReqCall {
	return &PublicUpdateReqCall{
		ctx:     ctx,
		publics: publics,
		body:    body,
		opts:    opts,
	}
}
