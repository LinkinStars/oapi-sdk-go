// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go"
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
)

type Service struct {
	conf    lark.Config
	Members *MemberService
	Publics *PublicService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Members = newMemberService(s)
	s.Publics = newPublicService(s)
	return s
}

type MemberService struct {
	service *Service
}

func newMemberService(service *Service) *MemberService {
	return &MemberService{
		service: service,
	}
}

type PublicService struct {
	service *Service
}

func newPublicService(service *Service) *PublicService {
	return &PublicService{
		service: service,
	}
}

type MemberCreateReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberCreateReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberCreateReqCall) Do() (*MemberCreateResult, error) {
	var result = &MemberCreateResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) Create(ctx *lark.Context, body *MemberCreateReqBody, opts ...lark.APIRequestOpt) *MemberCreateReqCall {
	return &MemberCreateReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type MemberDeleteReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberDeleteReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberDeleteReqCall) Do() (*MemberDeleteResult, error) {
	var result = &MemberDeleteResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/delete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) Delete(ctx *lark.Context, body *MemberDeleteReqBody, opts ...lark.APIRequestOpt) *MemberDeleteReqCall {
	return &MemberDeleteReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type MemberListReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberListReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberListReqCall) Do() (*MemberListResult, error) {
	var result = &MemberListResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/list", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) List(ctx *lark.Context, body *MemberListReqBody, opts ...lark.APIRequestOpt) *MemberListReqCall {
	return &MemberListReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type MemberPermittedReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberPermittedReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberPermittedReqCall) Do() (*MemberPermittedResult, error) {
	var result = &MemberPermittedResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/permitted", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) Permitted(ctx *lark.Context, body *MemberPermittedReqBody, opts ...lark.APIRequestOpt) *MemberPermittedReqCall {
	return &MemberPermittedReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type MemberTransferReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberTransferReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberTransferReqCall) Do() (*MemberTransferResult, error) {
	var result = &MemberTransferResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/transfer", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) Transfer(ctx *lark.Context, body *MemberTransferReqBody, opts ...lark.APIRequestOpt) *MemberTransferReqCall {
	return &MemberTransferReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type MemberUpdateReqCall struct {
	ctx     *lark.Context
	members *MemberService
	body    *MemberUpdateReqBody
	opts    []lark.APIRequestOpt
}

func (rc *MemberUpdateReqCall) Do() (*MemberUpdateResult, error) {
	var result = &MemberUpdateResult{}
	req := request.NewRequest("/open-apis/drive/permission/member/update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.members.service.conf, req)
	return result, err
}

func (members *MemberService) Update(ctx *lark.Context, body *MemberUpdateReqBody, opts ...lark.APIRequestOpt) *MemberUpdateReqCall {
	return &MemberUpdateReqCall{
		ctx:     ctx,
		members: members,
		body:    body,
		opts:    opts,
	}
}

type PublicUpdateReqCall struct {
	ctx     *lark.Context
	publics *PublicService
	body    *PublicUpdateReqBody
	opts    []lark.APIRequestOpt
}

func (rc *PublicUpdateReqCall) Do() (*PublicUpdateResult, error) {
	var result = &PublicUpdateResult{}
	req := request.NewRequest("/open-apis/drive/permission/public/update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.publics.service.conf, req)
	return result, err
}

func (publics *PublicService) Update(ctx *lark.Context, body *PublicUpdateReqBody, opts ...lark.APIRequestOpt) *PublicUpdateReqCall {
	return &PublicUpdateReqCall{
		ctx:     ctx,
		publics: publics,
		body:    body,
		opts:    opts,
	}
}
