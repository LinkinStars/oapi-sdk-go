// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go"
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
)

type Service struct {
	conf            lark.Config
	Apps            *AppService
	AppTables       *AppTableService
	AppTableFields  *AppTableFieldService
	AppTableRecords *AppTableRecordService
	AppTableViews   *AppTableViewService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Apps = newAppService(s)
	s.AppTables = newAppTableService(s)
	s.AppTableFields = newAppTableFieldService(s)
	s.AppTableRecords = newAppTableRecordService(s)
	s.AppTableViews = newAppTableViewService(s)
	return s
}

type AppService struct {
	service *Service
}

func newAppService(service *Service) *AppService {
	return &AppService{
		service: service,
	}
}

type AppTableService struct {
	service *Service
}

func newAppTableService(service *Service) *AppTableService {
	return &AppTableService{
		service: service,
	}
}

type AppTableFieldService struct {
	service *Service
}

func newAppTableFieldService(service *Service) *AppTableFieldService {
	return &AppTableFieldService{
		service: service,
	}
}

type AppTableRecordService struct {
	service *Service
}

func newAppTableRecordService(service *Service) *AppTableRecordService {
	return &AppTableRecordService{
		service: service,
	}
}

type AppTableViewService struct {
	service *Service
}

func newAppTableViewService(service *Service) *AppTableViewService {
	return &AppTableViewService{
		service: service,
	}
}

type AppTableRecordBatchDeleteReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	body            *AppTableRecordBatchDeleteReqBody
	pathParams      map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordBatchDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordBatchDeleteReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}

func (rc *AppTableRecordBatchDeleteReqCall) Do() (*AppTableRecordBatchDeleteResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &AppTableRecordBatchDeleteResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) BatchDelete(ctx *lark.Context, body *AppTableRecordBatchDeleteReqBody, opts ...lark.APIRequestOpt) *AppTableRecordBatchDeleteReqCall {
	return &AppTableRecordBatchDeleteReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		body:            body,
		pathParams:      map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordBatchCreateReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	body            *AppTableRecordBatchCreateReqBody
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordBatchCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordBatchCreateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordBatchCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordBatchCreateReqCall) Do() (*AppTableRecordBatchCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordBatchCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) BatchCreate(ctx *lark.Context, body *AppTableRecordBatchCreateReqBody, opts ...lark.APIRequestOpt) *AppTableRecordBatchCreateReqCall {
	return &AppTableRecordBatchCreateReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		body:            body,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordGetReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordGetReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordGetReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordGetReqCall) SetRecordId(recordId string) {
	rc.pathParams["record_id"] = recordId
}
func (rc *AppTableRecordGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordGetReqCall) Do() (*AppTableRecordGetResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordGetResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) Get(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableRecordGetReqCall {
	return &AppTableRecordGetReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordUpdateReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	body            *AppTableRecord
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordUpdateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordUpdateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordUpdateReqCall) SetRecordId(recordId string) {
	rc.pathParams["record_id"] = recordId
}
func (rc *AppTableRecordUpdateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordUpdateReqCall) Do() (*AppTableRecordUpdateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordUpdateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) Update(ctx *lark.Context, body *AppTableRecord, opts ...lark.APIRequestOpt) *AppTableRecordUpdateReqCall {
	return &AppTableRecordUpdateReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		body:            body,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordDeleteReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	pathParams      map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordDeleteReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordDeleteReqCall) SetRecordId(recordId string) {
	rc.pathParams["record_id"] = recordId
}

func (rc *AppTableRecordDeleteReqCall) Do() (*DeleteRecord, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &DeleteRecord{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) Delete(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableRecordDeleteReqCall {
	return &AppTableRecordDeleteReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		pathParams:      map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordListReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordListReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordListReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordListReqCall) SetViewId(viewId string) {
	rc.queryParams["view_id"] = viewId
}
func (rc *AppTableRecordListReqCall) SetFilter(filter string) {
	rc.queryParams["filter"] = filter
}
func (rc *AppTableRecordListReqCall) SetSort(sort string) {
	rc.queryParams["sort"] = sort
}
func (rc *AppTableRecordListReqCall) SetFieldNames(fieldNames string) {
	rc.queryParams["field_names"] = fieldNames
}
func (rc *AppTableRecordListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AppTableRecordListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *AppTableRecordListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordListReqCall) Do() (*AppTableRecordListResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordListResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableRecordListReqCall {
	return &AppTableRecordListReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordBatchUpdateReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	body            *AppTableRecordBatchUpdateReqBody
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordBatchUpdateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordBatchUpdateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordBatchUpdateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordBatchUpdateReqCall) Do() (*AppTableRecordBatchUpdateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordBatchUpdateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) BatchUpdate(ctx *lark.Context, body *AppTableRecordBatchUpdateReqBody, opts ...lark.APIRequestOpt) *AppTableRecordBatchUpdateReqCall {
	return &AppTableRecordBatchUpdateReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		body:            body,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppTableRecordCreateReqCall struct {
	ctx             *lark.Context
	appTableRecords *AppTableRecordService
	body            *AppTableRecord
	pathParams      map[string]interface{}
	queryParams     map[string]interface{}
	opts            []lark.APIRequestOpt
}

func (rc *AppTableRecordCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableRecordCreateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableRecordCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableRecordCreateReqCall) Do() (*AppTableRecordCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableRecordCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableRecords.service.conf, req)
	return result, err
}

func (appTableRecords *AppTableRecordService) Create(ctx *lark.Context, body *AppTableRecord, opts ...lark.APIRequestOpt) *AppTableRecordCreateReqCall {
	return &AppTableRecordCreateReqCall{
		ctx:             ctx,
		appTableRecords: appTableRecords,
		body:            body,
		pathParams:      map[string]interface{}{},
		queryParams:     map[string]interface{}{},
		opts:            opts,
	}
}

type AppGetReqCall struct {
	ctx        *lark.Context
	apps       *AppService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *AppGetReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}

func (rc *AppGetReqCall) Do() (*AppGetResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &AppGetResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.apps.service.conf, req)
	return result, err
}

func (apps *AppService) Get(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppGetReqCall {
	return &AppGetReqCall{
		ctx:        ctx,
		apps:       apps,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type AppTableListReqCall struct {
	ctx         *lark.Context
	appTables   *AppTableService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *AppTableListReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AppTableListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *AppTableListReqCall) Do() (*AppTableListResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableListResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTables.service.conf, req)
	return result, err
}

func (appTables *AppTableService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableListReqCall {
	return &AppTableListReqCall{
		ctx:         ctx,
		appTables:   appTables,
		pathParams:  map[string]interface{}{},
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type AppTableFieldListReqCall struct {
	ctx            *lark.Context
	appTableFields *AppTableFieldService
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	opts           []lark.APIRequestOpt
}

func (rc *AppTableFieldListReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableFieldListReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableFieldListReqCall) SetViewId(viewId string) {
	rc.queryParams["view_id"] = viewId
}
func (rc *AppTableFieldListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *AppTableFieldListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *AppTableFieldListReqCall) Do() (*AppTableFieldListResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableFieldListResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableFields.service.conf, req)
	return result, err
}

func (appTableFields *AppTableFieldService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableFieldListReqCall {
	return &AppTableFieldListReqCall{
		ctx:            ctx,
		appTableFields: appTableFields,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		opts:           opts,
	}
}

type AppTableFieldCreateReqCall struct {
	ctx            *lark.Context
	appTableFields *AppTableFieldService
	body           *AppTableField
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	opts           []lark.APIRequestOpt
}

func (rc *AppTableFieldCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableFieldCreateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableFieldCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableFieldCreateReqCall) Do() (*AppTableFieldCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableFieldCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableFields.service.conf, req)
	return result, err
}

func (appTableFields *AppTableFieldService) Create(ctx *lark.Context, body *AppTableField, opts ...lark.APIRequestOpt) *AppTableFieldCreateReqCall {
	return &AppTableFieldCreateReqCall{
		ctx:            ctx,
		appTableFields: appTableFields,
		body:           body,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		opts:           opts,
	}
}

type AppTableBatchCreateReqCall struct {
	ctx         *lark.Context
	appTables   *AppTableService
	body        *AppTableBatchCreateReqBody
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *AppTableBatchCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableBatchCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableBatchCreateReqCall) Do() (*AppTableBatchCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableBatchCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/batch_create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTables.service.conf, req)
	return result, err
}

func (appTables *AppTableService) BatchCreate(ctx *lark.Context, body *AppTableBatchCreateReqBody, opts ...lark.APIRequestOpt) *AppTableBatchCreateReqCall {
	return &AppTableBatchCreateReqCall{
		ctx:         ctx,
		appTables:   appTables,
		body:        body,
		pathParams:  map[string]interface{}{},
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type AppTableCreateReqCall struct {
	ctx         *lark.Context
	appTables   *AppTableService
	body        *AppTableCreateReqBody
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *AppTableCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *AppTableCreateReqCall) Do() (*AppTableCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTables.service.conf, req)
	return result, err
}

func (appTables *AppTableService) Create(ctx *lark.Context, body *AppTableCreateReqBody, opts ...lark.APIRequestOpt) *AppTableCreateReqCall {
	return &AppTableCreateReqCall{
		ctx:         ctx,
		appTables:   appTables,
		body:        body,
		pathParams:  map[string]interface{}{},
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type AppTableDeleteReqCall struct {
	ctx        *lark.Context
	appTables  *AppTableService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *AppTableDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableDeleteReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}

func (rc *AppTableDeleteReqCall) Do() (*lark.NoData, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTables.service.conf, req)
	return result, err
}

func (appTables *AppTableService) Delete(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableDeleteReqCall {
	return &AppTableDeleteReqCall{
		ctx:        ctx,
		appTables:  appTables,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type AppTableFieldDeleteReqCall struct {
	ctx            *lark.Context
	appTableFields *AppTableFieldService
	pathParams     map[string]interface{}
	opts           []lark.APIRequestOpt
}

func (rc *AppTableFieldDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableFieldDeleteReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableFieldDeleteReqCall) SetFieldId(fieldId string) {
	rc.pathParams["field_id"] = fieldId
}

func (rc *AppTableFieldDeleteReqCall) Do() (*AppTableFieldDeleteResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &AppTableFieldDeleteResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableFields.service.conf, req)
	return result, err
}

func (appTableFields *AppTableFieldService) Delete(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableFieldDeleteReqCall {
	return &AppTableFieldDeleteReqCall{
		ctx:            ctx,
		appTableFields: appTableFields,
		pathParams:     map[string]interface{}{},
		opts:           opts,
	}
}

type AppTableFieldUpdateReqCall struct {
	ctx            *lark.Context
	appTableFields *AppTableFieldService
	body           *AppTableField
	pathParams     map[string]interface{}
	opts           []lark.APIRequestOpt
}

func (rc *AppTableFieldUpdateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableFieldUpdateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableFieldUpdateReqCall) SetFieldId(fieldId string) {
	rc.pathParams["field_id"] = fieldId
}

func (rc *AppTableFieldUpdateReqCall) Do() (*AppTableFieldUpdateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &AppTableFieldUpdateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", "PUT",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableFields.service.conf, req)
	return result, err
}

func (appTableFields *AppTableFieldService) Update(ctx *lark.Context, body *AppTableField, opts ...lark.APIRequestOpt) *AppTableFieldUpdateReqCall {
	return &AppTableFieldUpdateReqCall{
		ctx:            ctx,
		appTableFields: appTableFields,
		body:           body,
		pathParams:     map[string]interface{}{},
		opts:           opts,
	}
}

type AppTableBatchDeleteReqCall struct {
	ctx        *lark.Context
	appTables  *AppTableService
	body       *AppTableBatchDeleteReqBody
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *AppTableBatchDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}

func (rc *AppTableBatchDeleteReqCall) Do() (*lark.NoData, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/batch_delete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTables.service.conf, req)
	return result, err
}

func (appTables *AppTableService) BatchDelete(ctx *lark.Context, body *AppTableBatchDeleteReqBody, opts ...lark.APIRequestOpt) *AppTableBatchDeleteReqCall {
	return &AppTableBatchDeleteReqCall{
		ctx:        ctx,
		appTables:  appTables,
		body:       body,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type AppTableViewCreateReqCall struct {
	ctx           *lark.Context
	appTableViews *AppTableViewService
	body          *AppTableView
	pathParams    map[string]interface{}
	opts          []lark.APIRequestOpt
}

func (rc *AppTableViewCreateReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableViewCreateReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}

func (rc *AppTableViewCreateReqCall) Do() (*AppTableViewCreateResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &AppTableViewCreateResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableViews.service.conf, req)
	return result, err
}

func (appTableViews *AppTableViewService) Create(ctx *lark.Context, body *AppTableView, opts ...lark.APIRequestOpt) *AppTableViewCreateReqCall {
	return &AppTableViewCreateReqCall{
		ctx:           ctx,
		appTableViews: appTableViews,
		body:          body,
		pathParams:    map[string]interface{}{},
		opts:          opts,
	}
}

type AppTableViewDeleteReqCall struct {
	ctx           *lark.Context
	appTableViews *AppTableViewService
	pathParams    map[string]interface{}
	opts          []lark.APIRequestOpt
}

func (rc *AppTableViewDeleteReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableViewDeleteReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableViewDeleteReqCall) SetViewId(viewId string) {
	rc.pathParams["view_id"] = viewId
}

func (rc *AppTableViewDeleteReqCall) Do() (*lark.NoData, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableViews.service.conf, req)
	return result, err
}

func (appTableViews *AppTableViewService) Delete(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableViewDeleteReqCall {
	return &AppTableViewDeleteReqCall{
		ctx:           ctx,
		appTableViews: appTableViews,
		pathParams:    map[string]interface{}{},
		opts:          opts,
	}
}

type AppTableViewListReqCall struct {
	ctx           *lark.Context
	appTableViews *AppTableViewService
	pathParams    map[string]interface{}
	queryParams   map[string]interface{}
	opts          []lark.APIRequestOpt
}

func (rc *AppTableViewListReqCall) SetAppToken(appToken string) {
	rc.pathParams["app_token"] = appToken
}
func (rc *AppTableViewListReqCall) SetTableId(tableId string) {
	rc.pathParams["table_id"] = tableId
}
func (rc *AppTableViewListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *AppTableViewListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}

func (rc *AppTableViewListReqCall) Do() (*AppTableViewListResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &AppTableViewListResult{}
	req := request.NewRequest("/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.appTableViews.service.conf, req)
	return result, err
}

func (appTableViews *AppTableViewService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *AppTableViewListReqCall {
	return &AppTableViewListReqCall{
		ctx:           ctx,
		appTableViews: appTableViews,
		pathParams:    map[string]interface{}{},
		queryParams:   map[string]interface{}{},
		opts:          opts,
	}
}
