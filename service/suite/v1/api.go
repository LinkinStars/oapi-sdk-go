// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go"
)

type Service struct {
	conf     lark.Config
	DocsApis *DocsApiService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.DocsApis = newDocsApiService(s)
	return s
}

type DocsApiService struct {
	service *Service
}

func newDocsApiService(service *Service) *DocsApiService {
	return &DocsApiService{
		service: service,
	}
}

type DocsApiMetaReqCall struct {
	ctx      *lark.Context
	docsApis *DocsApiService
	body     *DocsApiMetaReqBody
	opts     []lark.APIRequestOpt
}

func (rc *DocsApiMetaReqCall) Do() (*DocsApiMetaResult, error) {
	var result = &DocsApiMetaResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/suite/docs-api/meta", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.docsApis.service.conf, req)
	return result, err
}

func (docsApis *DocsApiService) Meta(ctx *lark.Context, body *DocsApiMetaReqBody, opts ...lark.APIRequestOpt) *DocsApiMetaReqCall {
	return &DocsApiMetaReqCall{
		ctx:      ctx,
		docsApis: docsApis,
		body:     body,
		opts:     opts,
	}
}

type DocsApiSearchReqCall struct {
	ctx      *lark.Context
	docsApis *DocsApiService
	body     *DocsApiSearchReqBody
	opts     []lark.APIRequestOpt
}

func (rc *DocsApiSearchReqCall) Do() (*DocsApiSearchResult, error) {
	var result = &DocsApiSearchResult{}
	req := lark.NewAPIRequestWithMultiToken("/open-apis/suite/docs-api/search/object", "POST",
		[]lark.AccessTokenType{lark.AccessTokenTypeUser}, rc.body, result, rc.opts...)
	err := lark.SendAPIRequest(rc.ctx, rc.docsApis.service.conf, req)
	return result, err
}

func (docsApis *DocsApiService) Search(ctx *lark.Context, body *DocsApiSearchReqBody, opts ...lark.APIRequestOpt) *DocsApiSearchReqCall {
	return &DocsApiSearchReqCall{
		ctx:      ctx,
		docsApis: docsApis,
		body:     body,
		opts:     opts,
	}
}
