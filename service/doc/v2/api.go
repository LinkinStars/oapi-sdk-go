// Code generated by lark suite oapi sdk gen
package v2

import (
	"github.com/larksuite/oapi-sdk-go"
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
)

type Service struct {
	conf lark.Config
	Docs *DocService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Docs = newDocService(s)
	return s
}

type DocService struct {
	service *Service
}

func newDocService(service *Service) *DocService {
	return &DocService{
		service: service,
	}
}

type DocBatchUpdateReqCall struct {
	ctx        *lark.Context
	docs       *DocService
	body       *DocBatchUpdateReqBody
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *DocBatchUpdateReqCall) SetDocToken(docToken string) {
	rc.pathParams["docToken"] = docToken
}

func (rc *DocBatchUpdateReqCall) Do() (*lark.NoData, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/doc/v2/:docToken/batch_update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.docs.service.conf, req)
	return result, err
}

func (docs *DocService) BatchUpdate(ctx *lark.Context, body *DocBatchUpdateReqBody, opts ...lark.APIRequestOpt) *DocBatchUpdateReqCall {
	return &DocBatchUpdateReqCall{
		ctx:        ctx,
		docs:       docs,
		body:       body,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type DocContentReqCall struct {
	ctx        *lark.Context
	docs       *DocService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *DocContentReqCall) SetDocToken(docToken string) {
	rc.pathParams["docToken"] = docToken
}

func (rc *DocContentReqCall) Do() (*DocContentResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &DocContentResult{}
	req := request.NewRequest("/open-apis/doc/v2/:docToken/content", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.docs.service.conf, req)
	return result, err
}

func (docs *DocService) Content(ctx *lark.Context, opts ...lark.APIRequestOpt) *DocContentReqCall {
	return &DocContentReqCall{
		ctx:        ctx,
		docs:       docs,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type DocCreateReqCall struct {
	ctx  *lark.Context
	docs *DocService
	body *DocCreateReqBody
	opts []lark.APIRequestOpt
}

func (rc *DocCreateReqCall) Do() (*DocCreateResult, error) {
	var result = &DocCreateResult{}
	req := request.NewRequest("/open-apis/doc/v2/create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.docs.service.conf, req)
	return result, err
}

func (docs *DocService) Create(ctx *lark.Context, body *DocCreateReqBody, opts ...lark.APIRequestOpt) *DocCreateReqCall {
	return &DocCreateReqCall{
		ctx:  ctx,
		docs: docs,
		body: body,
		opts: opts,
	}
}

type DocMetaReqCall struct {
	ctx        *lark.Context
	docs       *DocService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *DocMetaReqCall) SetDocToken(docToken string) {
	rc.pathParams["docToken"] = docToken
}

func (rc *DocMetaReqCall) Do() (*DocMetaResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &DocMetaResult{}
	req := request.NewRequest("/open-apis/doc/v2/meta/:docToken", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.docs.service.conf, req)
	return result, err
}

func (docs *DocService) Meta(ctx *lark.Context, opts ...lark.APIRequestOpt) *DocMetaReqCall {
	return &DocMetaReqCall{
		ctx:        ctx,
		docs:       docs,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}

type DocRawContentReqCall struct {
	ctx        *lark.Context
	docs       *DocService
	pathParams map[string]interface{}
	opts       []lark.APIRequestOpt
}

func (rc *DocRawContentReqCall) SetDocToken(docToken string) {
	rc.pathParams["docToken"] = docToken
}

func (rc *DocRawContentReqCall) Do() (*DocRawContentResult, error) {
	rc.opts = append(rc.opts, request.SetPathParams(rc.pathParams))
	var result = &DocRawContentResult{}
	req := request.NewRequest("/open-apis/doc/v2/:docToken/raw_content", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeUser, request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.docs.service.conf, req)
	return result, err
}

func (docs *DocService) RawContent(ctx *lark.Context, opts ...lark.APIRequestOpt) *DocRawContentReqCall {
	return &DocRawContentReqCall{
		ctx:        ctx,
		docs:       docs,
		pathParams: map[string]interface{}{},
		opts:       opts,
	}
}
