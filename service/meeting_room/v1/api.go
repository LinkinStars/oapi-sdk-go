// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go"
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
)

type Service struct {
	conf         lark.Config
	Buildings    *BuildingService
	Countrys     *CountryService
	Districts    *DistrictService
	Freebusys    *FreebusyService
	Instances    *InstanceService
	Rooms        *RoomService
	Summarys     *SummaryService
	MeetingRooms *MeetingRoomService
}

func NewService(conf lark.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Buildings = newBuildingService(s)
	s.Countrys = newCountryService(s)
	s.Districts = newDistrictService(s)
	s.Freebusys = newFreebusyService(s)
	s.Instances = newInstanceService(s)
	s.Rooms = newRoomService(s)
	s.Summarys = newSummaryService(s)
	s.MeetingRooms = newMeetingRoomService(s)
	return s
}

type BuildingService struct {
	service *Service
}

func newBuildingService(service *Service) *BuildingService {
	return &BuildingService{
		service: service,
	}
}

type CountryService struct {
	service *Service
}

func newCountryService(service *Service) *CountryService {
	return &CountryService{
		service: service,
	}
}

type DistrictService struct {
	service *Service
}

func newDistrictService(service *Service) *DistrictService {
	return &DistrictService{
		service: service,
	}
}

type FreebusyService struct {
	service *Service
}

func newFreebusyService(service *Service) *FreebusyService {
	return &FreebusyService{
		service: service,
	}
}

type InstanceService struct {
	service *Service
}

func newInstanceService(service *Service) *InstanceService {
	return &InstanceService{
		service: service,
	}
}

type RoomService struct {
	service *Service
}

func newRoomService(service *Service) *RoomService {
	return &RoomService{
		service: service,
	}
}

type SummaryService struct {
	service *Service
}

func newSummaryService(service *Service) *SummaryService {
	return &SummaryService{
		service: service,
	}
}

type MeetingRoomService struct {
	service *Service
}

func newMeetingRoomService(service *Service) *MeetingRoomService {
	return &MeetingRoomService{
		service: service,
	}
}

type RoomBatchGetReqCall struct {
	ctx         *lark.Context
	rooms       *RoomService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *RoomBatchGetReqCall) SetRoomIds(roomIds ...string) {
	rc.queryParams["room_ids"] = roomIds
}
func (rc *RoomBatchGetReqCall) SetFields(fields string) {
	rc.queryParams["fields"] = fields
}

func (rc *RoomBatchGetReqCall) Do() (*RoomBatchGetResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &RoomBatchGetResult{}
	req := request.NewRequest("/open-apis/meeting_room/room/batch_get", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) BatchGet(ctx *lark.Context, opts ...lark.APIRequestOpt) *RoomBatchGetReqCall {
	return &RoomBatchGetReqCall{
		ctx:         ctx,
		rooms:       rooms,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type FreebusyBatchGetReqCall struct {
	ctx         *lark.Context
	freebusys   *FreebusyService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *FreebusyBatchGetReqCall) SetRoomIds(roomIds ...string) {
	rc.queryParams["room_ids"] = roomIds
}
func (rc *FreebusyBatchGetReqCall) SetTimeMin(timeMin string) {
	rc.queryParams["time_min"] = timeMin
}
func (rc *FreebusyBatchGetReqCall) SetTimeMax(timeMax string) {
	rc.queryParams["time_max"] = timeMax
}

func (rc *FreebusyBatchGetReqCall) Do() (*FreebusyBatchGetResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &FreebusyBatchGetResult{}
	req := request.NewRequest("/open-apis/meeting_room/freebusy/batch_get", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.freebusys.service.conf, req)
	return result, err
}

func (freebusys *FreebusyService) BatchGet(ctx *lark.Context, opts ...lark.APIRequestOpt) *FreebusyBatchGetReqCall {
	return &FreebusyBatchGetReqCall{
		ctx:         ctx,
		freebusys:   freebusys,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type SummaryBatchGetReqCall struct {
	ctx      *lark.Context
	summarys *SummaryService
	body     *SummaryBatchGetReqBody
	opts     []lark.APIRequestOpt
}

func (rc *SummaryBatchGetReqCall) Do() (*SummaryBatchGetResult, error) {
	var result = &SummaryBatchGetResult{}
	req := request.NewRequest("/open-apis/meeting_room/summary/batch_get", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.summarys.service.conf, req)
	return result, err
}

func (summarys *SummaryService) BatchGet(ctx *lark.Context, body *SummaryBatchGetReqBody, opts ...lark.APIRequestOpt) *SummaryBatchGetReqCall {
	return &SummaryBatchGetReqCall{
		ctx:      ctx,
		summarys: summarys,
		body:     body,
		opts:     opts,
	}
}

type BuildingBatchGetReqCall struct {
	ctx         *lark.Context
	buildings   *BuildingService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *BuildingBatchGetReqCall) SetBuildingIds(buildingIds ...string) {
	rc.queryParams["building_ids"] = buildingIds
}
func (rc *BuildingBatchGetReqCall) SetFields(fields string) {
	rc.queryParams["fields"] = fields
}

func (rc *BuildingBatchGetReqCall) Do() (*BuildingBatchGetResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &BuildingBatchGetResult{}
	req := request.NewRequest("/open-apis/meeting_room/building/batch_get", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) BatchGet(ctx *lark.Context, opts ...lark.APIRequestOpt) *BuildingBatchGetReqCall {
	return &BuildingBatchGetReqCall{
		ctx:         ctx,
		buildings:   buildings,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type RoomBatchGetIdReqCall struct {
	ctx         *lark.Context
	rooms       *RoomService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *RoomBatchGetIdReqCall) SetCustomRoomIds(customRoomIds ...string) {
	rc.queryParams["custom_room_ids"] = customRoomIds
}

func (rc *RoomBatchGetIdReqCall) Do() (*RoomBatchGetIdResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &RoomBatchGetIdResult{}
	req := request.NewRequest("/open-apis/meeting_room/room/batch_get_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) BatchGetId(ctx *lark.Context, opts ...lark.APIRequestOpt) *RoomBatchGetIdReqCall {
	return &RoomBatchGetIdReqCall{
		ctx:         ctx,
		rooms:       rooms,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type BuildingBatchGetIdReqCall struct {
	ctx         *lark.Context
	buildings   *BuildingService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *BuildingBatchGetIdReqCall) SetCustomBuildingIds(customBuildingIds ...string) {
	rc.queryParams["custom_building_ids"] = customBuildingIds
}

func (rc *BuildingBatchGetIdReqCall) Do() (*BuildingBatchGetIdResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &BuildingBatchGetIdResult{}
	req := request.NewRequest("/open-apis/meeting_room/building/batch_get_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) BatchGetId(ctx *lark.Context, opts ...lark.APIRequestOpt) *BuildingBatchGetIdReqCall {
	return &BuildingBatchGetIdReqCall{
		ctx:         ctx,
		buildings:   buildings,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type BuildingCreateReqCall struct {
	ctx       *lark.Context
	buildings *BuildingService
	body      *BuildingCreateReqBody
	opts      []lark.APIRequestOpt
}

func (rc *BuildingCreateReqCall) Do() (*BuildingCreateResult, error) {
	var result = &BuildingCreateResult{}
	req := request.NewRequest("/open-apis/meeting_room/building/create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) Create(ctx *lark.Context, body *BuildingCreateReqBody, opts ...lark.APIRequestOpt) *BuildingCreateReqCall {
	return &BuildingCreateReqCall{
		ctx:       ctx,
		buildings: buildings,
		body:      body,
		opts:      opts,
	}
}

type RoomCreateReqCall struct {
	ctx   *lark.Context
	rooms *RoomService
	body  *RoomCreateReqBody
	opts  []lark.APIRequestOpt
}

func (rc *RoomCreateReqCall) Do() (*RoomCreateResult, error) {
	var result = &RoomCreateResult{}
	req := request.NewRequest("/open-apis/meeting_room/room/create", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) Create(ctx *lark.Context, body *RoomCreateReqBody, opts ...lark.APIRequestOpt) *RoomCreateReqCall {
	return &RoomCreateReqCall{
		ctx:   ctx,
		rooms: rooms,
		body:  body,
		opts:  opts,
	}
}

type BuildingDeleteReqCall struct {
	ctx       *lark.Context
	buildings *BuildingService
	body      *BuildingDeleteReqBody
	opts      []lark.APIRequestOpt
}

func (rc *BuildingDeleteReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/meeting_room/building/delete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) Delete(ctx *lark.Context, body *BuildingDeleteReqBody, opts ...lark.APIRequestOpt) *BuildingDeleteReqCall {
	return &BuildingDeleteReqCall{
		ctx:       ctx,
		buildings: buildings,
		body:      body,
		opts:      opts,
	}
}

type RoomDeleteReqCall struct {
	ctx   *lark.Context
	rooms *RoomService
	body  *RoomDeleteReqBody
	opts  []lark.APIRequestOpt
}

func (rc *RoomDeleteReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/meeting_room/room/delete", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) Delete(ctx *lark.Context, body *RoomDeleteReqBody, opts ...lark.APIRequestOpt) *RoomDeleteReqCall {
	return &RoomDeleteReqCall{
		ctx:   ctx,
		rooms: rooms,
		body:  body,
		opts:  opts,
	}
}

type BuildingListReqCall struct {
	ctx         *lark.Context
	buildings   *BuildingService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *BuildingListReqCall) SetOrderBy(orderBy string) {
	rc.queryParams["order_by"] = orderBy
}
func (rc *BuildingListReqCall) SetFields(fields string) {
	rc.queryParams["fields"] = fields
}
func (rc *BuildingListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *BuildingListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *BuildingListReqCall) Do() (*BuildingListResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &BuildingListResult{}
	req := request.NewRequest("/open-apis/meeting_room/building/list", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *BuildingListReqCall {
	return &BuildingListReqCall{
		ctx:         ctx,
		buildings:   buildings,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type DistrictListReqCall struct {
	ctx         *lark.Context
	districts   *DistrictService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *DistrictListReqCall) SetCountryId(countryId int) {
	rc.queryParams["country_id"] = countryId
}

func (rc *DistrictListReqCall) Do() (*DistrictListResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &DistrictListResult{}
	req := request.NewRequest("/open-apis/meeting_room/district/list", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.districts.service.conf, req)
	return result, err
}

func (districts *DistrictService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *DistrictListReqCall {
	return &DistrictListReqCall{
		ctx:         ctx,
		districts:   districts,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type RoomListReqCall struct {
	ctx         *lark.Context
	rooms       *RoomService
	queryParams map[string]interface{}
	opts        []lark.APIRequestOpt
}

func (rc *RoomListReqCall) SetBuildingId(buildingId string) {
	rc.queryParams["building_id"] = buildingId
}
func (rc *RoomListReqCall) SetOrderBy(orderBy string) {
	rc.queryParams["order_by"] = orderBy
}
func (rc *RoomListReqCall) SetFields(fields string) {
	rc.queryParams["fields"] = fields
}
func (rc *RoomListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *RoomListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}

func (rc *RoomListReqCall) Do() (*RoomListResult, error) {
	rc.opts = append(rc.opts, request.SetQueryParams(rc.queryParams))
	var result = &RoomListResult{}
	req := request.NewRequest("/open-apis/meeting_room/room/list", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *RoomListReqCall {
	return &RoomListReqCall{
		ctx:         ctx,
		rooms:       rooms,
		queryParams: map[string]interface{}{},
		opts:        opts,
	}
}

type CountryListReqCall struct {
	ctx      *lark.Context
	countrys *CountryService
	opts     []lark.APIRequestOpt
}

func (rc *CountryListReqCall) Do() (*CountryListResult, error) {
	var result = &CountryListResult{}
	req := request.NewRequest("/open-apis/meeting_room/country/list", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, nil, result, rc.opts...)
	err := api.Send(rc.ctx, rc.countrys.service.conf, req)
	return result, err
}

func (countrys *CountryService) List(ctx *lark.Context, opts ...lark.APIRequestOpt) *CountryListReqCall {
	return &CountryListReqCall{
		ctx:      ctx,
		countrys: countrys,
		opts:     opts,
	}
}

type InstanceReplyReqCall struct {
	ctx       *lark.Context
	instances *InstanceService
	body      *InstanceReplyReqBody
	opts      []lark.APIRequestOpt
}

func (rc *InstanceReplyReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/meeting_room/instance/reply", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.instances.service.conf, req)
	return result, err
}

func (instances *InstanceService) Reply(ctx *lark.Context, body *InstanceReplyReqBody, opts ...lark.APIRequestOpt) *InstanceReplyReqCall {
	return &InstanceReplyReqCall{
		ctx:       ctx,
		instances: instances,
		body:      body,
		opts:      opts,
	}
}

type BuildingUpdateReqCall struct {
	ctx       *lark.Context
	buildings *BuildingService
	body      *BuildingUpdateReqBody
	opts      []lark.APIRequestOpt
}

func (rc *BuildingUpdateReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/meeting_room/building/update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.buildings.service.conf, req)
	return result, err
}

func (buildings *BuildingService) Update(ctx *lark.Context, body *BuildingUpdateReqBody, opts ...lark.APIRequestOpt) *BuildingUpdateReqCall {
	return &BuildingUpdateReqCall{
		ctx:       ctx,
		buildings: buildings,
		body:      body,
		opts:      opts,
	}
}

type RoomUpdateReqCall struct {
	ctx   *lark.Context
	rooms *RoomService
	body  *RoomUpdateReqBody
	opts  []lark.APIRequestOpt
}

func (rc *RoomUpdateReqCall) Do() (*lark.NoData, error) {
	var result = &lark.NoData{}
	req := request.NewRequest("/open-apis/meeting_room/room/update", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant}, rc.body, result, rc.opts...)
	err := api.Send(rc.ctx, rc.rooms.service.conf, req)
	return result, err
}

func (rooms *RoomService) Update(ctx *lark.Context, body *RoomUpdateReqBody, opts ...lark.APIRequestOpt) *RoomUpdateReqCall {
	return &RoomUpdateReqCall{
		ctx:   ctx,
		rooms: rooms,
		body:  body,
		opts:  opts,
	}
}
