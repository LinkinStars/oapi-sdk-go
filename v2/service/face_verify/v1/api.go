// Package face_verify code generated by lark suite oapi sdk gen
package face_verify

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type FaceVerifyService struct {
	FaceVerify *faceVerify
}

func New(app *lark.App) *FaceVerifyService {
	f := &FaceVerifyService{}
	f.FaceVerify = &faceVerify{app: app}
	return f
}

type faceVerify struct {
	app *lark.App
}

func (f *faceVerify) CropFaceImage(ctx context.Context, req *FaceVerifyCropFaceImageReq, options ...lark.RequestOptionFunc) (*FaceVerifyCropFaceImageResp, error) {
	options = append(options, lark.WithFileUpload())
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/face_verify/v1/crop_face_image", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FaceVerifyCropFaceImageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faceVerify) QueryAuthResult(ctx context.Context, req *FaceVerifyQueryAuthResultReq, options ...lark.RequestOptionFunc) (*FaceVerifyQueryAuthResultResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/face_verify/v1/query_auth_result", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FaceVerifyQueryAuthResultResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *faceVerify) UploadFaceImage(ctx context.Context, req *FaceVerifyUploadFaceImageReq, options ...lark.RequestOptionFunc) (*FaceVerifyUploadFaceImageResp, error) {
	options = append(options, lark.WithFileUpload())
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/face_verify/v1/upload_face_image", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FaceVerifyUploadFaceImageResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
