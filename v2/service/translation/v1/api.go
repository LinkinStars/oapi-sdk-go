// Package translation code generated by lark suite oapi sdk gen
package translation

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type TranslationService struct {
	Text *text
}

func New(app *lark.App) *TranslationService {
	t := &TranslationService{}
	t.Text = &text{app: app}
	return t
}

type text struct {
	app *lark.App
}

func (t *text) Translate(ctx context.Context, req *TextTranslateReq, options ...lark.RequestOptionFunc) (*TextTranslateResp, error) {
	rawResp, err := t.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/translation/v1/text/translate", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &TextTranslateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (t *text) Detect(ctx context.Context, req *TextDetectReq, options ...lark.RequestOptionFunc) (*TextDetectResp, error) {
	rawResp, err := t.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/translation/v1/text/detect", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &TextDetectResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
