// Package docx code generated by lark suite oapi sdk gen
package docx

import (
	"github.com/larksuite/oapi-sdk-go/v2"
)


type Bitable struct {
	Token  *string `json:"token,omitempty"`
	ViewType  *int `json:"view_type,omitempty"`
}

type Block struct {
	BlockId  *string `json:"block_id,omitempty"`
	ParentId  *string `json:"parent_id,omitempty"`
	Children  []string `json:"children,omitempty"`
	BlockType  *int `json:"block_type,omitempty"`
	Page  *Text `json:"page,omitempty"`
	Text  *Text `json:"text,omitempty"`
	Heading1  *Text `json:"heading1,omitempty"`
	Heading2  *Text `json:"heading2,omitempty"`
	Heading3  *Text `json:"heading3,omitempty"`
	Heading4  *Text `json:"heading4,omitempty"`
	Heading5  *Text `json:"heading5,omitempty"`
	Heading6  *Text `json:"heading6,omitempty"`
	Heading7  *Text `json:"heading7,omitempty"`
	Heading8  *Text `json:"heading8,omitempty"`
	Heading9  *Text `json:"heading9,omitempty"`
	Bullet  *Text `json:"bullet,omitempty"`
	Ordered  *Text `json:"ordered,omitempty"`
	Code  *Text `json:"code,omitempty"`
	Quote  *Text `json:"quote,omitempty"`
	Equation  *Text `json:"equation,omitempty"`
	Todo  *Text `json:"todo,omitempty"`
	Bitable  *Bitable `json:"bitable,omitempty"`
	Callout  *Callout `json:"callout,omitempty"`
	ChatCard  *ChatCard `json:"chat_card,omitempty"`
	Diagram  *Diagram `json:"diagram,omitempty"`
	Divider  *Divider `json:"divider,omitempty"`
	File  *File `json:"file,omitempty"`
	Grid  *Grid `json:"grid,omitempty"`
	GridColumn  *GridColumn `json:"grid_column,omitempty"`
	Iframe  *Iframe `json:"iframe,omitempty"`
	Image  *Image `json:"image,omitempty"`
	Isv  *Isv `json:"isv,omitempty"`
	Mindnote  *Mindnote `json:"mindnote,omitempty"`
	Sheet  *Sheet `json:"sheet,omitempty"`
	Table  *Table `json:"table,omitempty"`
	TableCell  *TableCell `json:"table_cell,omitempty"`
	View  *View `json:"view,omitempty"`
	Undefined  *Undefined `json:"undefined,omitempty"`
}

type Callout struct {
	BackgroundColor  *int `json:"background_color,omitempty"`
	BorderColor  *int `json:"border_color,omitempty"`
	TextColor  *int `json:"text_color,omitempty"`
	EmojiId  *string `json:"emoji_id,omitempty"`
}

type ChatCard struct {
	ChatId  *int64 `json:"chat_id,omitempty,string"`
	Align  *int `json:"align,omitempty"`
}

type DeleteGridColumnRequest struct {
	ColumnIndex  *int `json:"column_index,omitempty"`
}

type DeleteTableColumnsRequest struct {
	ColumnStartIndex  *int `json:"column_start_index,omitempty"`
	ColumnEndIndex  *int `json:"column_end_index,omitempty"`
}

type DeleteTableRowsRequest struct {
	RowStartIndex  *int `json:"row_start_index,omitempty"`
	RowEndIndex  *int `json:"row_end_index,omitempty"`
}

type Diagram struct {
	DiagramType  *int `json:"diagram_type,omitempty"`
}

type Divider struct {
}

type Document struct {
	DocumentId  *string `json:"document_id,omitempty"`
	RevisionId  *int `json:"revision_id,omitempty"`
	Title  *string `json:"title,omitempty"`
}

type File struct {
	Token  *string `json:"token,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type Grid struct {
	ColumnSize  *int `json:"column_size,omitempty"`
}

type GridColumn struct {
	WidthRatio  *int `json:"width_ratio,omitempty"`
}

type Iframe struct {
	Component  *IframeComponent `json:"component,omitempty"`
}

type IframeComponent struct {
	IframeType  *int `json:"iframe_type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

type Image struct {
	Width  *int `json:"width,omitempty"`
	Height  *int `json:"height,omitempty"`
	Token  *string `json:"token,omitempty"`
}

type InlineBlock struct {
	BlockId  *string `json:"block_id,omitempty"`
}

type InlineFile struct {
	FileToken  *string `json:"file_token,omitempty"`
	SourceBlockId  *string `json:"source_block_id,omitempty"`
}

type InsertGridColumnRequest struct {
	ColumnIndex  *int `json:"column_index,omitempty"`
}

type InsertTableColumnRequest struct {
	ColumnIndex  *int `json:"column_index,omitempty"`
}

type InsertTableRowRequest struct {
	RowIndex  *int `json:"row_index,omitempty"`
}

type Isv struct {
	ComponentId  *string `json:"component_id,omitempty"`
	ComponentTypeId  *string `json:"component_type_id,omitempty"`
}

type Link struct {
	Url  *string `json:"url,omitempty"`
}

type MentionDoc struct {
	Token  *string `json:"token,omitempty"`
	ObjType  *int `json:"obj_type,omitempty"`
	Url  *string `json:"url,omitempty"`
	Title  *string `json:"title,omitempty"`
}

type MentionUser struct {
	UserId  *string `json:"user_id,omitempty"`
}

type MergeTableCellsRequest struct {
	RowStartIndex  *int `json:"row_start_index,omitempty"`
	RowEndIndex  *int `json:"row_end_index,omitempty"`
	ColumnStartIndex  *int `json:"column_start_index,omitempty"`
	ColumnEndIndex  *int `json:"column_end_index,omitempty"`
}

type Mindnote struct {
	Token  *string `json:"token,omitempty"`
}

type Reminder struct {
	CreateUserId  *string `json:"create_user_id,omitempty"`
	IsNotify  *bool `json:"is_notify,omitempty"`
	IsWholeDay  *bool `json:"is_whole_day,omitempty"`
	ExpireTime  *int64 `json:"expire_time,omitempty,string"`
	NotifyTime  *int64 `json:"notify_time,omitempty,string"`
}

type ReplaceFileRequest struct {
	Token  *string `json:"token,omitempty"`
}

type ReplaceImageRequest struct {
	Token  *string `json:"token,omitempty"`
}

type Sheet struct {
	Token  *string `json:"token,omitempty"`
	RowSize  *int `json:"row_size,omitempty"`
	ColumnSize  *int `json:"column_size,omitempty"`
}

type Table struct {
	Cells  []string `json:"cells,omitempty"`
	Property  *TableProperty `json:"property,omitempty"`
}

type TableCell struct {
}

type TableMergeInfo struct {
	RowSpan  *int `json:"row_span,omitempty"`
	ColSpan  *int `json:"col_span,omitempty"`
}

type TableProperty struct {
	RowSize  *int `json:"row_size,omitempty"`
	ColumnSize  *int `json:"column_size,omitempty"`
	ColumnWidth  []int `json:"column_width,omitempty"`
	MergeInfo  []*TableMergeInfo `json:"merge_info,omitempty"`
}

type Text struct {
	Style  *TextStyle `json:"style,omitempty"`
	Elements  []*TextElement `json:"elements,omitempty"`
}

type TextElement struct {
	TextRun  *TextRun `json:"text_run,omitempty"`
	MentionUser  *MentionUser `json:"mention_user,omitempty"`
	MentionDoc  *MentionDoc `json:"mention_doc,omitempty"`
	Reminder  *Reminder `json:"reminder,omitempty"`
	File  *InlineFile `json:"file,omitempty"`
	Undefined  *UndefinedElement `json:"undefined,omitempty"`
	InlineBlock  *InlineBlock `json:"inline_block,omitempty"`
}

type TextElementStyle struct {
	Bold  *bool `json:"bold,omitempty"`
	Italic  *bool `json:"italic,omitempty"`
	Strikethrough  *bool `json:"strikethrough,omitempty"`
	Underline  *bool `json:"underline,omitempty"`
	InlineCode  *bool `json:"inline_code,omitempty"`
	BackgroundColor  *int `json:"background_color,omitempty"`
	TextColor  *int `json:"text_color,omitempty"`
	Link  *Link `json:"link,omitempty"`
}

type TextRun struct {
	Content  *string `json:"content,omitempty"`
	TextElementStyle  *TextElementStyle `json:"text_element_style,omitempty"`
}

type TextStyle struct {
	Align  *int `json:"align,omitempty"`
	Done  *bool `json:"done,omitempty"`
	Folded  *bool `json:"folded,omitempty"`
	Language  *int `json:"language,omitempty"`
	Wrap  *bool `json:"wrap,omitempty"`
}

type Undefined struct {
}

type UndefinedElement struct {
}

type UnmergeTableCellsRequest struct {
	RowIndex  *int `json:"row_index,omitempty"`
	ColumnIndex  *int `json:"column_index,omitempty"`
}

type UpdateBlockRequest struct {
	UpdateTextElements  *UpdateTextElementsRequest `json:"update_text_elements,omitempty"`
	UpdateTextStyle  *UpdateTextStyleRequest `json:"update_text_style,omitempty"`
	UpdateTableProperty  *UpdateTablePropertyRequest `json:"update_table_property,omitempty"`
	InsertTableRow  *InsertTableRowRequest `json:"insert_table_row,omitempty"`
	InsertTableColumn  *InsertTableColumnRequest `json:"insert_table_column,omitempty"`
	DeleteTableRows  *DeleteTableRowsRequest `json:"delete_table_rows,omitempty"`
	DeleteTableColumns  *DeleteTableColumnsRequest `json:"delete_table_columns,omitempty"`
	MergeTableCells  *MergeTableCellsRequest `json:"merge_table_cells,omitempty"`
	UnmergeTableCells  *UnmergeTableCellsRequest `json:"unmerge_table_cells,omitempty"`
	InsertGridColumn  *InsertGridColumnRequest `json:"insert_grid_column,omitempty"`
	DeleteGridColumn  *DeleteGridColumnRequest `json:"delete_grid_column,omitempty"`
	UpdateGridColumnWidthRatio  *UpdateGridColumnWidthRatioRequest `json:"update_grid_column_width_ratio,omitempty"`
	ReplaceImage  *ReplaceImageRequest `json:"replace_image,omitempty"`
	ReplaceFile  *ReplaceFileRequest `json:"replace_file,omitempty"`
	BlockId  *string `json:"block_id,omitempty"`
}

type UpdateGridColumnWidthRatioRequest struct {
	WidthRatios  []int `json:"width_ratios,omitempty"`
}

type UpdateTablePropertyRequest struct {
	ColumnWidth  *int `json:"column_width,omitempty"`
	ColumnIndex  *int `json:"column_index,omitempty"`
}

type UpdateTextElementsRequest struct {
	Elements  []*TextElement `json:"elements,omitempty"`
}

type UpdateTextStyleRequest struct {
	Style  *TextStyle `json:"style,omitempty"`
	Fields  []int `json:"fields,omitempty"`
}

type View struct {
	ViewType  *int `json:"view_type,omitempty"`
}


type DocumentCreateReqBody struct {
	FolderToken  *string `json:"folder_token,omitempty"`
	Title  *string `json:"title,omitempty"`
}

type DocumentCreateReq struct {
	Body *DocumentCreateReqBody `body:""`
}

type DocumentCreateRespData struct {
	Document  *Document `json:"document,omitempty"`
}

type DocumentCreateResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentCreateRespData `json:"data"`
}


type DocumentGetReq struct {
	DocumentId  string `path:"document_id"`
}

type DocumentGetRespData struct {
	Document  *Document `json:"document,omitempty"`
}

type DocumentGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentGetRespData `json:"data"`
}


type DocumentRawContentReq struct {
	DocumentId  string `path:"document_id"`
	Lang  *int `query:"lang"`
}

type DocumentRawContentRespData struct {
	Content  *string `json:"content,omitempty"`
}

type DocumentRawContentResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentRawContentRespData `json:"data"`
}

type DocumentBlockBatchUpdateReqBody struct {
	Requests  []*UpdateBlockRequest `json:"requests,omitempty"`
}

type DocumentBlockBatchUpdateReq struct {
	DocumentId  string `path:"document_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	ClientToken  *string `query:"client_token"`
	UserIdType  *string `query:"user_id_type"`
	Body *DocumentBlockBatchUpdateReqBody `body:""`
}

type DocumentBlockBatchUpdateRespData struct {
	Blocks  []*Block `json:"blocks,omitempty"`
	DocumentRevisionId  *int `json:"document_revision_id,omitempty"`
	ClientToken  *string `json:"client_token,omitempty"`
}

type DocumentBlockBatchUpdateResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockBatchUpdateRespData `json:"data"`
}


type DocumentBlockGetReq struct {
	DocumentId  string `path:"document_id"`
	BlockId  string `path:"block_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	UserIdType  *string `query:"user_id_type"`
}

type DocumentBlockGetRespData struct {
	Block  *Block `json:"block,omitempty"`
}

type DocumentBlockGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockGetRespData `json:"data"`
}


type DocumentBlockListReq struct {
	DocumentId  string `path:"document_id"`
	PageSize  *int `query:"page_size"`
	PageToken  *string `query:"page_token"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	UserIdType  *string `query:"user_id_type"`
}

type DocumentBlockListRespData struct {
	Items  []*Block `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type DocumentBlockListResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockListRespData `json:"data"`
}


type DocumentBlockPatchReq struct {
	DocumentId  string `path:"document_id"`
	BlockId  string `path:"block_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	ClientToken  *string `query:"client_token"`
	UserIdType  *string `query:"user_id_type"`
	UpdateBlockRequest *UpdateBlockRequest `body:""`
}

type DocumentBlockPatchRespData struct {
	Block  *Block `json:"block,omitempty"`
	DocumentRevisionId  *int `json:"document_revision_id,omitempty"`
	ClientToken  *string `json:"client_token,omitempty"`
}

type DocumentBlockPatchResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockPatchRespData `json:"data"`
}

type DocumentBlockChildrenBatchDeleteReqBody struct {
	StartIndex  *int `json:"start_index,omitempty"`
	EndIndex  *int `json:"end_index,omitempty"`
}

type DocumentBlockChildrenBatchDeleteReq struct {
	DocumentId  string `path:"document_id"`
	BlockId  string `path:"block_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	ClientToken  *string `query:"client_token"`
	Body *DocumentBlockChildrenBatchDeleteReqBody `body:""`
}

type DocumentBlockChildrenBatchDeleteRespData struct {
	DocumentRevisionId  *int `json:"document_revision_id,omitempty"`
	ClientToken  *string `json:"client_token,omitempty"`
}

type DocumentBlockChildrenBatchDeleteResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockChildrenBatchDeleteRespData `json:"data"`
}

type DocumentBlockChildrenCreateReqBody struct {
	Children  []*Block `json:"children,omitempty"`
	Index  *int `json:"index,omitempty"`
}

type DocumentBlockChildrenCreateReq struct {
	DocumentId  string `path:"document_id"`
	BlockId  string `path:"block_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	ClientToken  *string `query:"client_token"`
	UserIdType  *string `query:"user_id_type"`
	Body *DocumentBlockChildrenCreateReqBody `body:""`
}

type DocumentBlockChildrenCreateRespData struct {
	Children  []*Block `json:"children,omitempty"`
	DocumentRevisionId  *int `json:"document_revision_id,omitempty"`
	ClientToken  *string `json:"client_token,omitempty"`
}

type DocumentBlockChildrenCreateResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockChildrenCreateRespData `json:"data"`
}


type DocumentBlockChildrenGetReq struct {
	DocumentId  string `path:"document_id"`
	BlockId  string `path:"block_id"`
	DocumentRevisionId  *int `query:"document_revision_id"`
	PageToken  *string `query:"page_token"`
	PageSize  *int `query:"page_size"`
	UserIdType  *string `query:"user_id_type"`
}

type DocumentBlockChildrenGetRespData struct {
	Items  []*Block `json:"items,omitempty"`
	PageToken  *string `json:"page_token,omitempty"`
	HasMore  *bool `json:"has_more,omitempty"`
}

type DocumentBlockChildrenGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *DocumentBlockChildrenGetRespData `json:"data"`
}
