// Package vc code generated by lark suite oapi sdk gen
package vc

import (
	"github.com/larksuite/oapi-sdk-go/v2"
)

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`
	OpenId  *string `json:"open_id,omitempty"`
	UnionId *string `json:"union_id,omitempty"`
}

type Material struct {
	Name           *string `json:"name,omitempty"`
	FileToken      *string `json:"file_token,omitempty"`
	FileSize       *int    `json:"file_size,omitempty"`
	DeviceType     *int    `json:"device_type,omitempty"`
	MaterialType   *int    `json:"material_type,omitempty"`
	ReviewResult   *int    `json:"review_result,omitempty"`
	MaterialSource *int    `json:"material_source,omitempty"`
}

type MaterialDeleteResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type MaterialReviewResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type MaterialUploadResult struct {
	FileToken *string `json:"file_token,omitempty"`
	Result    *int    `json:"result,omitempty"`
}

type MeetingRecording struct {
	Id        *int64  `json:"id,omitempty,string"`
	MeetingId *int64  `json:"meeting_id,omitempty,string"`
	Url       *string `json:"url,omitempty"`
	Duration  *int64  `json:"duration,omitempty,string"`
}

type MeetingAbility struct {
	UseVideo        *bool `json:"use_video,omitempty"`
	UseAudio        *bool `json:"use_audio,omitempty"`
	UseShareScreen  *bool `json:"use_share_screen,omitempty"`
	UseFollowScreen *bool `json:"use_follow_screen,omitempty"`
	UseRecording    *bool `json:"use_recording,omitempty"`
	UsePstn         *bool `json:"use_pstn,omitempty"`
}

type MeetingEventMeeting struct {
	Id        *int64            `json:"id,omitempty,string"`
	Topic     *string           `json:"topic,omitempty"`
	MeetingNo *string           `json:"meeting_no,omitempty"`
	StartTime *int64            `json:"start_time,omitempty,string"`
	EndTime   *int64            `json:"end_time,omitempty,string"`
	HostUser  *MeetingEventUser `json:"host_user,omitempty"`
	Owner     *MeetingEventUser `json:"owner,omitempty"`
}

type MeetingEventUser struct {
	Id       *UserId `json:"id,omitempty"`
	UserRole *int    `json:"user_role,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
}

type MeetingInviteStatus struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
	Status   *int    `json:"status,omitempty"`
}

type MeetingParticipantResult struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
	Result   *int    `json:"result,omitempty"`
}

type MeetingUser struct {
	Id       *string `json:"id,omitempty"`
	UserType *int    `json:"user_type,omitempty"`
}

type PstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`
	MainAddress *string `json:"main_address,omitempty"`
}

type RecordingPermissionObject struct {
	Id         *string `json:"id,omitempty"`
	Type       *int    `json:"type,omitempty"`
	Permission *int    `json:"permission,omitempty"`
}

type Report struct {
	TotalMeetingCount     *int64                `json:"total_meeting_count,omitempty,string"`
	TotalMeetingDuration  *int64                `json:"total_meeting_duration,omitempty,string"`
	TotalParticipantCount *int64                `json:"total_participant_count,omitempty,string"`
	DailyReport           []*ReportMeetingDaily `json:"daily_report,omitempty"`
}

type ReportMeetingDaily struct {
	Date             *int64 `json:"date,omitempty,string"`
	MeetingCount     *int64 `json:"meeting_count,omitempty,string"`
	MeetingDuration  *int64 `json:"meeting_duration,omitempty,string"`
	ParticipantCount *int64 `json:"participant_count,omitempty,string"`
}

type ReportTopUser struct {
	Id              *int64  `json:"id,omitempty,string"`
	Name            *string `json:"name,omitempty"`
	UserType        *int    `json:"user_type,omitempty"`
	MeetingCount    *int64  `json:"meeting_count,omitempty,string"`
	MeetingDuration *int64  `json:"meeting_duration,omitempty,string"`
}

type Reserve struct {
	Id              *int64                 `json:"id,omitempty,string"`
	MeetingNo       *string                `json:"meeting_no,omitempty"`
	Url             *string                `json:"url,omitempty"`
	AppLink         *string                `json:"app_link,omitempty"`
	LiveLink        *string                `json:"live_link,omitempty"`
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	ExpireStatus    *int                   `json:"expire_status,omitempty"`
	ReserveUserId   *string                `json:"reserve_user_id,omitempty"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type ReserveActionPermission struct {
	Permission         *int                        `json:"permission,omitempty"`
	PermissionCheckers []*ReservePermissionChecker `json:"permission_checkers,omitempty"`
}

type ReserveCallSetting struct {
	Callee *ReserveCallee `json:"callee,omitempty"`
}

type ReserveCallee struct {
	Id          *string      `json:"id,omitempty"`
	UserType    *int         `json:"user_type,omitempty"`
	PstnSipInfo *PstnSipInfo `json:"pstn_sip_info,omitempty"`
}

type ReserveMeetingSetting struct {
	Topic              *string                    `json:"topic,omitempty"`
	ActionPermissions  []*ReserveActionPermission `json:"action_permissions,omitempty"`
	MeetingInitialType *int                       `json:"meeting_initial_type,omitempty"`
	CallSetting        *ReserveCallSetting        `json:"call_setting,omitempty"`
}

type ReservePermissionChecker struct {
	CheckField *int     `json:"check_field,omitempty"`
	CheckMode  *int     `json:"check_mode,omitempty"`
	CheckList  []string `json:"check_list,omitempty"`
}

type RoomDigitalSignage struct {
	Enable       *bool                         `json:"enable,omitempty"`
	Mute         *bool                         `json:"mute,omitempty"`
	StartDisplay *int                          `json:"start_display,omitempty"`
	StopDisplay  *int                          `json:"stop_display,omitempty"`
	Materials    []*RoomDigitalSignageMaterial `json:"materials,omitempty"`
}

type Meeting struct {
	Id                          *int64                `json:"id,omitempty,string"`
	Topic                       *string               `json:"topic,omitempty"`
	Url                         *string               `json:"url,omitempty"`
	MeetingNo                   *string               `json:"meeting_no,omitempty"`
	CreateTime                  *int64                `json:"create_time,omitempty,string"`
	StartTime                   *int64                `json:"start_time,omitempty,string"`
	EndTime                     *int64                `json:"end_time,omitempty,string"`
	HostUser                    *MeetingUser          `json:"host_user,omitempty"`
	Status                      *int                  `json:"status,omitempty"`
	ParticipantCount            *int64                `json:"participant_count,omitempty,string"`
	ParticipantCountAccumulated *int64                `json:"participant_count_accumulated,omitempty,string"`
	Participants                []*MeetingParticipant `json:"participants,omitempty"`
	Ability                     *MeetingAbility       `json:"ability,omitempty"`
}

type MeetingParticipant struct {
	Id                *string `json:"id,omitempty"`
	FirstJoinTime     *int64  `json:"first_join_time,omitempty,string"`
	FinalLeaveTime    *int64  `json:"final_leave_time,omitempty,string"`
	InMeetingDuration *int64  `json:"in_meeting_duration,omitempty,string"`
	UserType          *int    `json:"user_type,omitempty"`
	IsHost            *bool   `json:"is_host,omitempty"`
	IsCohost          *bool   `json:"is_cohost,omitempty"`
	IsExternal        *bool   `json:"is_external,omitempty"`
	Status            *int    `json:"status,omitempty"`
}

type RoomConfig struct {
	RoomBackground        *string             `json:"room_background,omitempty"`
	DisplayBackground     *string             `json:"display_background,omitempty"`
	DigitalSignage        *RoomDigitalSignage `json:"digital_signage,omitempty"`
	RoomBoxDigitalSignage *RoomDigitalSignage `json:"room_box_digital_signage,omitempty"`
}

type RoomDigitalSignageMaterial struct {
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	MaterialType *int    `json:"material_type,omitempty"`
	Url          *string `json:"url,omitempty"`
	Duration     *int    `json:"duration,omitempty"`
	Cover        *string `json:"cover,omitempty"`
	Md5          *string `json:"md5,omitempty"`
	Vid          *string `json:"vid,omitempty"`
	Size         *string `json:"size,omitempty"`
}

type MeetingInviteReqBody struct {
	Invitees []*MeetingUser `json:"invitees,omitempty"`
}

type MeetingInviteReq struct {
	MeetingId  string                `path:"meeting_id"`
	UserIdType *string               `query:"user_id_type"`
	Body       *MeetingInviteReqBody `body:""`
}

type MeetingInviteRespData struct {
	InviteResults []*MeetingInviteStatus `json:"invite_results,omitempty"`
}

type MeetingInviteResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingInviteRespData `json:"data"`
}

type MeetingSetHostReqBody struct {
	HostUser    *MeetingUser `json:"host_user,omitempty"`
	OldHostUser *MeetingUser `json:"old_host_user,omitempty"`
}

type MeetingSetHostReq struct {
	MeetingId  string                 `path:"meeting_id"`
	UserIdType *string                `query:"user_id_type"`
	Body       *MeetingSetHostReqBody `body:""`
}

type MeetingSetHostRespData struct {
	HostUser *MeetingUser `json:"host_user,omitempty"`
}

type MeetingSetHostResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingSetHostRespData `json:"data"`
}

type MeetingEndReq struct {
	MeetingId string `path:"meeting_id"`
}

type MeetingEndResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type MeetingGetReq struct {
	MeetingId          string  `path:"meeting_id"`
	WithParticipants   *bool   `query:"with_participants"`
	WithMeetingAbility *bool   `query:"with_meeting_ability"`
	UserIdType         *string `query:"user_id_type"`
}

type MeetingGetRespData struct {
	Meeting *Meeting `json:"meeting,omitempty"`
}

type MeetingGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingGetRespData `json:"data"`
}

type MeetingKickoutReqBody struct {
	KickoutUsers []*MeetingUser `json:"kickout_users,omitempty"`
}

type MeetingKickoutReq struct {
	MeetingId  string                 `path:"meeting_id"`
	UserIdType *string                `query:"user_id_type"`
	Body       *MeetingKickoutReqBody `body:""`
}

type MeetingKickoutRespData struct {
	KickoutResults []*MeetingParticipantResult `json:"kickout_results,omitempty"`
}

type MeetingKickoutResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingKickoutRespData `json:"data"`
}

type MeetingListByNoReq struct {
	MeetingNo *string `query:"meeting_no"`
	StartTime *int64  `query:"start_time"`
	EndTime   *int64  `query:"end_time"`
	PageToken *string `query:"page_token"`
	PageSize  *int    `query:"page_size"`
}

type MeetingListByNoRespData struct {
	HasMore       *bool      `json:"has_more,omitempty"`
	PageToken     *string    `json:"page_token,omitempty"`
	MeetingBriefs []*Meeting `json:"meeting_briefs,omitempty"`
}

type MeetingListByNoResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingListByNoRespData `json:"data"`
}

type MeetingRecordingGetReq struct {
	MeetingId string `path:"meeting_id"`
}

type MeetingRecordingGetRespData struct {
	Recording *MeetingRecording `json:"recording,omitempty"`
}

type MeetingRecordingGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *MeetingRecordingGetRespData `json:"data"`
}

type MeetingRecordingStopReq struct {
	MeetingId string `path:"meeting_id"`
}

type MeetingRecordingStopResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type MeetingRecordingSetPermissionReqBody struct {
	PermissionObjects []*RecordingPermissionObject `json:"permission_objects,omitempty"`
}

type MeetingRecordingSetPermissionReq struct {
	MeetingId  string                                `path:"meeting_id"`
	UserIdType *string                               `query:"user_id_type"`
	Body       *MeetingRecordingSetPermissionReqBody `body:""`
}

type MeetingRecordingSetPermissionResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type MeetingRecordingStartReqBody struct {
	Timezone *int `json:"timezone,omitempty"`
}

type MeetingRecordingStartReq struct {
	MeetingId string                        `path:"meeting_id"`
	Body      *MeetingRecordingStartReqBody `body:""`
}

type MeetingRecordingStartResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type ReportGetTopUserReq struct {
	StartTime  *int64  `query:"start_time"`
	EndTime    *int64  `query:"end_time"`
	Limit      *int    `query:"limit"`
	OrderBy    *int    `query:"order_by"`
	UserIdType *string `query:"user_id_type"`
}

type ReportGetTopUserRespData struct {
	TopUserReport []*ReportTopUser `json:"top_user_report,omitempty"`
}

type ReportGetTopUserResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReportGetTopUserRespData `json:"data"`
}

type ReportGetDailyReq struct {
	StartTime *int64 `query:"start_time"`
	EndTime   *int64 `query:"end_time"`
}

type ReportGetDailyRespData struct {
	MeetingReport *Report `json:"meeting_report,omitempty"`
}

type ReportGetDailyResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReportGetDailyRespData `json:"data"`
}

type ReserveUpdateReqBody struct {
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type ReserveUpdateReq struct {
	ReserveId  string                `path:"reserve_id"`
	UserIdType *string               `query:"user_id_type"`
	Body       *ReserveUpdateReqBody `body:""`
}

type ReserveUpdateRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type ReserveUpdateResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReserveUpdateRespData `json:"data"`
}

type ReserveApplyReqBody struct {
	EndTime         *int64                 `json:"end_time,omitempty,string"`
	MeetingSettings *ReserveMeetingSetting `json:"meeting_settings,omitempty"`
}

type ReserveApplyReq struct {
	UserIdType *string              `query:"user_id_type"`
	Body       *ReserveApplyReqBody `body:""`
}

type ReserveApplyRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type ReserveApplyResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReserveApplyRespData `json:"data"`
}

type ReserveGetReq struct {
	ReserveId  string  `path:"reserve_id"`
	UserIdType *string `query:"user_id_type"`
}

type ReserveGetRespData struct {
	Reserve *Reserve `json:"reserve,omitempty"`
}

type ReserveGetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReserveGetRespData `json:"data"`
}

type ReserveGetActiveMeetingReq struct {
	ReserveId        string  `path:"reserve_id"`
	WithParticipants *bool   `query:"with_participants"`
	UserIdType       *string `query:"user_id_type"`
}

type ReserveGetActiveMeetingRespData struct {
	Meeting *Meeting `json:"meeting,omitempty"`
}

type ReserveGetActiveMeetingResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *ReserveGetActiveMeetingRespData `json:"data"`
}

type ReserveDeleteReq struct {
	ReserveId string `path:"reserve_id"`
}

type ReserveDeleteResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type RoomConfigQueryReq struct {
	Scope      *int    `query:"scope"`
	CountryId  *string `query:"country_id"`
	DistrictId *string `query:"district_id"`
	BuildingId *string `query:"building_id"`
	FloorName  *string `query:"floor_name"`
	RoomId     *string `query:"room_id"`
}

type RoomConfigQueryResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
	Data *RoomConfig `json:"data"`
}

type RoomConfigSetReqBody struct {
	Scope      *int        `json:"scope,omitempty"`
	CountryId  *string     `json:"country_id,omitempty"`
	DistrictId *string     `json:"district_id,omitempty"`
	BuildingId *string     `json:"building_id,omitempty"`
	FloorName  *string     `json:"floor_name,omitempty"`
	RoomId     *string     `json:"room_id,omitempty"`
	RoomConfig *RoomConfig `json:"room_config,omitempty"`
}

type RoomConfigSetReq struct {
	Body *RoomConfigSetReqBody `body:""`
}

type RoomConfigSetResp struct {
	*lark.RawResponse `json:"-"`
	lark.CodeError
}

type MeetingLeaveMeetingEventData struct {
	Meeting     *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator    *MeetingEventUser    `json:"operator,omitempty"`
	LeaveReason *int                 `json:"leave_reason,omitempty"`
}

type MeetingLeaveMeetingEvent struct {
	*lark.EventV2Base
	Event *MeetingLeaveMeetingEventData `json:"event"`
}

type MeetingMeetingEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingMeetingEndedEvent struct {
	*lark.EventV2Base
	Event *MeetingMeetingEndedEventData `json:"event"`
}

type MeetingMeetingStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingMeetingStartedEvent struct {
	*lark.EventV2Base
	Event *MeetingMeetingStartedEventData `json:"event"`
}

type MeetingRecordingEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingRecordingEndedEvent struct {
	*lark.EventV2Base
	Event *MeetingRecordingEndedEventData `json:"event"`
}

type MeetingShareEndedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingShareEndedEvent struct {
	*lark.EventV2Base
	Event *MeetingShareEndedEventData `json:"event"`
}

type MeetingJoinMeetingEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingJoinMeetingEvent struct {
	*lark.EventV2Base
	Event *MeetingJoinMeetingEventData `json:"event"`
}

type MeetingRecordingStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingRecordingStartedEvent struct {
	*lark.EventV2Base
	Event *MeetingRecordingStartedEventData `json:"event"`
}

type MeetingShareStartedEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Operator *MeetingEventUser    `json:"operator,omitempty"`
}

type MeetingShareStartedEvent struct {
	*lark.EventV2Base
	Event *MeetingShareStartedEventData `json:"event"`
}

type MeetingRecordingReadyEventData struct {
	Meeting  *MeetingEventMeeting `json:"meeting,omitempty"`
	Url      *string              `json:"url,omitempty"`
	Duration *int64               `json:"duration,omitempty,string"`
}

type MeetingRecordingReadyEvent struct {
	*lark.EventV2Base
	Event *MeetingRecordingReadyEventData `json:"event"`
}
