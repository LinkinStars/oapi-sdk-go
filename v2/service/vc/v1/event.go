// Package vc code generated by lark suite oapi sdk gen
package vc

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/v2"
)

type meetingLeaveMeetingEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingLeaveMeetingEvent) error
}

func (h *meetingLeaveMeetingEventHandler) Event() interface{} {
	return &MeetingLeaveMeetingEvent{}
}

func (h *meetingLeaveMeetingEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingLeaveMeetingEvent))
}

func (m *meetings) LeaveMeetingEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingLeaveMeetingEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.leave_meeting_v1", &meetingLeaveMeetingEventHandler{handler: handler})
}

type meetingMeetingEndedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingMeetingEndedEvent) error
}

func (h *meetingMeetingEndedEventHandler) Event() interface{} {
	return &MeetingMeetingEndedEvent{}
}

func (h *meetingMeetingEndedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingMeetingEndedEvent))
}

func (m *meetings) MeetingEndedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingMeetingEndedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.meeting_ended_v1", &meetingMeetingEndedEventHandler{handler: handler})
}

type meetingMeetingStartedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingMeetingStartedEvent) error
}

func (h *meetingMeetingStartedEventHandler) Event() interface{} {
	return &MeetingMeetingStartedEvent{}
}

func (h *meetingMeetingStartedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingMeetingStartedEvent))
}

func (m *meetings) MeetingStartedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingMeetingStartedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.meeting_started_v1", &meetingMeetingStartedEventHandler{handler: handler})
}

type meetingRecordingEndedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRecordingEndedEvent) error
}

func (h *meetingRecordingEndedEventHandler) Event() interface{} {
	return &MeetingRecordingEndedEvent{}
}

func (h *meetingRecordingEndedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRecordingEndedEvent))
}

func (m *meetings) RecordingEndedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRecordingEndedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.recording_ended_v1", &meetingRecordingEndedEventHandler{handler: handler})
}

type meetingShareEndedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingShareEndedEvent) error
}

func (h *meetingShareEndedEventHandler) Event() interface{} {
	return &MeetingShareEndedEvent{}
}

func (h *meetingShareEndedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingShareEndedEvent))
}

func (m *meetings) ShareEndedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingShareEndedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.share_ended_v1", &meetingShareEndedEventHandler{handler: handler})
}

type meetingJoinMeetingEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingJoinMeetingEvent) error
}

func (h *meetingJoinMeetingEventHandler) Event() interface{} {
	return &MeetingJoinMeetingEvent{}
}

func (h *meetingJoinMeetingEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingJoinMeetingEvent))
}

func (m *meetings) JoinMeetingEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingJoinMeetingEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.join_meeting_v1", &meetingJoinMeetingEventHandler{handler: handler})
}

type meetingRecordingStartedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRecordingStartedEvent) error
}

func (h *meetingRecordingStartedEventHandler) Event() interface{} {
	return &MeetingRecordingStartedEvent{}
}

func (h *meetingRecordingStartedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRecordingStartedEvent))
}

func (m *meetings) RecordingStartedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRecordingStartedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.recording_started_v1", &meetingRecordingStartedEventHandler{handler: handler})
}

type meetingShareStartedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingShareStartedEvent) error
}

func (h *meetingShareStartedEventHandler) Event() interface{} {
	return &MeetingShareStartedEvent{}
}

func (h *meetingShareStartedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingShareStartedEvent))
}

func (m *meetings) ShareStartedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingShareStartedEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.share_started_v1", &meetingShareStartedEventHandler{handler: handler})
}

type meetingRecordingReadyEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRecordingReadyEvent) error
}

func (h *meetingRecordingReadyEventHandler) Event() interface{} {
	return &MeetingRecordingReadyEvent{}
}

func (h *meetingRecordingReadyEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRecordingReadyEvent))
}

func (m *meetings) RecordingReadyEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRecordingReadyEvent) error) {
	m.app.Webhook.EventHandler("vc.meeting.recording_ready_v1", &meetingRecordingReadyEventHandler{handler: handler})
}
