// Package bitable code generated by lark suite oapi sdk gen
package bitable

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type BitableService struct {
	Apps            *apps
	AppTables       *appTables
	AppTableFields  *appTableFields
	AppTableRecords *appTableRecords
	AppTableViews   *appTableViews
}

func New(app *lark.App) *BitableService {
	b := &BitableService{}
	b.Apps = &apps{app: app}
	b.AppTables = &appTables{app: app}
	b.AppTableFields = &appTableFields{app: app}
	b.AppTableRecords = &appTableRecords{app: app}
	b.AppTableViews = &appTableViews{app: app}
	return b
}

type apps struct {
	app *lark.App
}
type appTables struct {
	app *lark.App
}
type appTableFields struct {
	app *lark.App
}
type appTableRecords struct {
	app *lark.App
}
type appTableViews struct {
	app *lark.App
}

func (a *apps) Get(ctx context.Context, req *AppGetReq, options ...lark.RequestOptionFunc) (*AppGetResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) List(ctx context.Context, req *AppTableListReq, options ...lark.RequestOptionFunc) (*AppTableListResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) BatchCreate(ctx context.Context, req *AppTableBatchCreateReq, options ...lark.RequestOptionFunc) (*AppTableBatchCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/batch_create", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableBatchCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) Create(ctx context.Context, req *AppTableCreateReq, options ...lark.RequestOptionFunc) (*AppTableCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) Delete(ctx context.Context, req *AppTableDeleteReq, options ...lark.RequestOptionFunc) (*AppTableDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTables) BatchDelete(ctx context.Context, req *AppTableBatchDeleteReq, options ...lark.RequestOptionFunc) (*AppTableBatchDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/batch_delete", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableBatchDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) List(ctx context.Context, req *AppTableFieldListReq, options ...lark.RequestOptionFunc) (*AppTableFieldListResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableFieldListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) Create(ctx context.Context, req *AppTableFieldCreateReq, options ...lark.RequestOptionFunc) (*AppTableFieldCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableFieldCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) Delete(ctx context.Context, req *AppTableFieldDeleteReq, options ...lark.RequestOptionFunc) (*AppTableFieldDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableFieldDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableFields) Update(ctx context.Context, req *AppTableFieldUpdateReq, options ...lark.RequestOptionFunc) (*AppTableFieldUpdateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableFieldUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) BatchDelete(ctx context.Context, req *AppTableRecordBatchDeleteReq, options ...lark.RequestOptionFunc) (*AppTableRecordBatchDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordBatchDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) BatchCreate(ctx context.Context, req *AppTableRecordBatchCreateReq, options ...lark.RequestOptionFunc) (*AppTableRecordBatchCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordBatchCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Get(ctx context.Context, req *AppTableRecordGetReq, options ...lark.RequestOptionFunc) (*AppTableRecordGetResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Update(ctx context.Context, req *AppTableRecordUpdateReq, options ...lark.RequestOptionFunc) (*AppTableRecordUpdateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Delete(ctx context.Context, req *AppTableRecordDeleteReq, options ...lark.RequestOptionFunc) (*AppTableRecordDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) List(ctx context.Context, req *AppTableRecordListReq, options ...lark.RequestOptionFunc) (*AppTableRecordListResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) BatchUpdate(ctx context.Context, req *AppTableRecordBatchUpdateReq, options ...lark.RequestOptionFunc) (*AppTableRecordBatchUpdateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordBatchUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableRecords) Create(ctx context.Context, req *AppTableRecordCreateReq, options ...lark.RequestOptionFunc) (*AppTableRecordCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableRecordCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) Create(ctx context.Context, req *AppTableViewCreateReq, options ...lark.RequestOptionFunc) (*AppTableViewCreateResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableViewCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) Delete(ctx context.Context, req *AppTableViewDeleteReq, options ...lark.RequestOptionFunc) (*AppTableViewDeleteResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableViewDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *appTableViews) List(ctx context.Context, req *AppTableViewListReq, options ...lark.RequestOptionFunc) (*AppTableViewListResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views", []lark.AccessTokenType{lark.AccessTokenTypeUser, lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AppTableViewListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
