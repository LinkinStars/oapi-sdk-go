// Package mail code generated by lark suite oapi sdk gen
package mail

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type MailService struct {
	MailgroupMembers           *mailgroupMembers
	MailgroupPermissionMembers *mailgroupPermissionMembers
	PublicMailboxes            *publicMailboxes
	PublicMailboxMembers       *publicMailboxMembers
	Mailgroups                 *mailgroups
}

func New(app *lark.App) *MailService {
	m := &MailService{}
	m.MailgroupMembers = &mailgroupMembers{app: app}
	m.MailgroupPermissionMembers = &mailgroupPermissionMembers{app: app}
	m.PublicMailboxes = &publicMailboxes{app: app}
	m.PublicMailboxMembers = &publicMailboxMembers{app: app}
	m.Mailgroups = &mailgroups{app: app}
	return m
}

type mailgroupMembers struct {
	app *lark.App
}
type mailgroupPermissionMembers struct {
	app *lark.App
}
type publicMailboxes struct {
	app *lark.App
}
type publicMailboxMembers struct {
	app *lark.App
}
type mailgroups struct {
	app *lark.App
}

func (m *mailgroups) Get(ctx context.Context, req *MailgroupGetReq, options ...lark.RequestOptionFunc) (*MailgroupGetResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroups) Update(ctx context.Context, req *MailgroupUpdateReq, options ...lark.RequestOptionFunc) (*MailgroupUpdateResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroups) Delete(ctx context.Context, req *MailgroupDeleteReq, options ...lark.RequestOptionFunc) (*MailgroupDeleteResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroups) Create(ctx context.Context, req *MailgroupCreateReq, options ...lark.RequestOptionFunc) (*MailgroupCreateResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/mailgroups", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroups) List(ctx context.Context, req *MailgroupListReq, options ...lark.RequestOptionFunc) (*MailgroupListResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroups) Patch(ctx context.Context, req *MailgroupPatchReq, options ...lark.RequestOptionFunc) (*MailgroupPatchResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupPatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMembers) List(ctx context.Context, req *MailgroupMemberListReq, options ...lark.RequestOptionFunc) (*MailgroupMemberListResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupMemberListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMembers) Get(ctx context.Context, req *MailgroupMemberGetReq, options ...lark.RequestOptionFunc) (*MailgroupMemberGetResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupMemberGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMembers) Create(ctx context.Context, req *MailgroupMemberCreateReq, options ...lark.RequestOptionFunc) (*MailgroupMemberCreateResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupMemberCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupMembers) Delete(ctx context.Context, req *MailgroupMemberDeleteReq, options ...lark.RequestOptionFunc) (*MailgroupMemberDeleteResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupMemberDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMembers) Delete(ctx context.Context, req *MailgroupPermissionMemberDeleteReq, options ...lark.RequestOptionFunc) (*MailgroupPermissionMemberDeleteResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupPermissionMemberDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMembers) Get(ctx context.Context, req *MailgroupPermissionMemberGetReq, options ...lark.RequestOptionFunc) (*MailgroupPermissionMemberGetResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupPermissionMemberGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMembers) List(ctx context.Context, req *MailgroupPermissionMemberListReq, options ...lark.RequestOptionFunc) (*MailgroupPermissionMemberListResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupPermissionMemberListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (m *mailgroupPermissionMembers) Create(ctx context.Context, req *MailgroupPermissionMemberCreateReq, options ...lark.RequestOptionFunc) (*MailgroupPermissionMemberCreateResp, error) {
	rawResp, err := m.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &MailgroupPermissionMemberCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxes) Update(ctx context.Context, req *PublicMailboxUpdateReq, options ...lark.RequestOptionFunc) (*PublicMailboxUpdateResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxes) List(ctx context.Context, req *PublicMailboxListReq, options ...lark.RequestOptionFunc) (*PublicMailboxListResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxes) Create(ctx context.Context, req *PublicMailboxCreateReq, options ...lark.RequestOptionFunc) (*PublicMailboxCreateResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxes) Get(ctx context.Context, req *PublicMailboxGetReq, options ...lark.RequestOptionFunc) (*PublicMailboxGetResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxes) Patch(ctx context.Context, req *PublicMailboxPatchReq, options ...lark.RequestOptionFunc) (*PublicMailboxPatchResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxPatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMembers) Get(ctx context.Context, req *PublicMailboxMemberGetReq, options ...lark.RequestOptionFunc) (*PublicMailboxMemberGetResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxMemberGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMembers) Delete(ctx context.Context, req *PublicMailboxMemberDeleteReq, options ...lark.RequestOptionFunc) (*PublicMailboxMemberDeleteResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxMemberDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMembers) Clear(ctx context.Context, req *PublicMailboxMemberClearReq, options ...lark.RequestOptionFunc) (*PublicMailboxMemberClearResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxMemberClearResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMembers) List(ctx context.Context, req *PublicMailboxMemberListReq, options ...lark.RequestOptionFunc) (*PublicMailboxMemberListResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxMemberListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (p *publicMailboxMembers) Create(ctx context.Context, req *PublicMailboxMemberCreateReq, options ...lark.RequestOptionFunc) (*PublicMailboxMemberCreateResp, error) {
	rawResp, err := p.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &PublicMailboxMemberCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
