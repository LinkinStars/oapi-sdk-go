// Package drive_explorer code generated by lark suite oapi sdk gen
package drive_explorer

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type DriveExplorerService struct {
	File   *file
	Folder *folder
}

func New(app *lark.App) *DriveExplorerService {
	d := &DriveExplorerService{}
	d.File = &file{app: app}
	d.Folder = &folder{app: app}
	return d
}

type file struct {
	app *lark.App
}
type folder struct {
	app *lark.App
}

func (f *file) Copy(ctx context.Context, req *FileCopyReq, options ...lark.RequestOptionFunc) (*FileCopyResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/drive/explorer/v2/file/copy/files/:fileToken", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FileCopyResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *file) Create(ctx context.Context, req *FileCreateReq, options ...lark.RequestOptionFunc) (*FileCreateResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/drive/explorer/v2/file/:folderToken", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FileCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *file) DocsDelete(ctx context.Context, req *FileDocsDeleteReq, options ...lark.RequestOptionFunc) (*FileDocsDeleteResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/drive/explorer/v2/file/docs/:docToken", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FileDocsDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *file) SpreadsheetsDelete(ctx context.Context, req *FileSpreadsheetsDeleteReq, options ...lark.RequestOptionFunc) (*FileSpreadsheetsDeleteResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/drive/explorer/v2/file/spreadsheets/:spreadsheetToken", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FileSpreadsheetsDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *folder) Children(ctx context.Context, req *FolderChildrenReq, options ...lark.RequestOptionFunc) (*FolderChildrenResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/drive/explorer/v2/folder/:folderToken/children", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FolderChildrenResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *folder) Create(ctx context.Context, req *FolderCreateReq, options ...lark.RequestOptionFunc) (*FolderCreateResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/drive/explorer/v2/folder/:folderToken", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FolderCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *folder) Meta(ctx context.Context, req *FolderMetaReq, options ...lark.RequestOptionFunc) (*FolderMetaResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/drive/explorer/v2/folder/:folderToken/meta", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FolderMetaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *folder) RootMeta(ctx context.Context, options ...lark.RequestOptionFunc) (*FolderRootMetaResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/drive/explorer/v2/root_folder/meta", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, nil, options...)
	if err != nil {
		return nil, err
	}
	resp := &FolderRootMetaResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
