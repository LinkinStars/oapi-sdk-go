// Package search code generated by lark suite oapi sdk gen
package search

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type SearchService struct {
	DataSources *dataSources
	Items       *items
}

func New(app *lark.App) *SearchService {
	s := &SearchService{}
	s.DataSources = &dataSources{app: app}
	s.Items = &items{app: app}
	return s
}

type dataSources struct {
	app *lark.App
}
type items struct {
	app *lark.App
}

func (d *dataSources) Create(ctx context.Context, req *DataSourceCreateReq, options ...lark.RequestOptionFunc) (*DataSourceCreateResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/search/v2/data_sources", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *dataSources) Delete(ctx context.Context, req *DataSourceDeleteReq, options ...lark.RequestOptionFunc) (*DataSourceDeleteResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/search/v2/data_sources/:data_source_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *dataSources) Get(ctx context.Context, req *DataSourceGetReq, options ...lark.RequestOptionFunc) (*DataSourceGetResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/search/v2/data_sources/:data_source_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *dataSources) List(ctx context.Context, req *DataSourceListReq, options ...lark.RequestOptionFunc) (*DataSourceListResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/search/v2/data_sources", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *dataSources) Patch(ctx context.Context, req *DataSourcePatchReq, options ...lark.RequestOptionFunc) (*DataSourcePatchResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/search/v2/data_sources/:data_source_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourcePatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *items) Create(ctx context.Context, req *DataSourceItemCreateReq, options ...lark.RequestOptionFunc) (*DataSourceItemCreateResp, error) {
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/search/v2/data_sources/:data_source_id/items", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceItemCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *items) Delete(ctx context.Context, req *DataSourceItemDeleteReq, options ...lark.RequestOptionFunc) (*DataSourceItemDeleteResp, error) {
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/search/v2/data_sources/:data_source_id/items/:item_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceItemDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *items) Get(ctx context.Context, req *DataSourceItemGetReq, options ...lark.RequestOptionFunc) (*DataSourceItemGetResp, error) {
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/search/v2/data_sources/:data_source_id/items/:item_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DataSourceItemGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
