// Package meeting_room code generated by lark suite oapi sdk gen
package meeting_room

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type MeetingRoomService struct {
	Building     *building
	Country      *country
	District     *district
	Freebusy     *freebusy
	Instance     *instance
	Room         *room
	Summary      *summary
	MeetingRooms *meetingRooms
}

func New(app *lark.App) *MeetingRoomService {
	m := &MeetingRoomService{}
	m.Building = &building{app: app}
	m.Country = &country{app: app}
	m.District = &district{app: app}
	m.Freebusy = &freebusy{app: app}
	m.Instance = &instance{app: app}
	m.Room = &room{app: app}
	m.Summary = &summary{app: app}
	m.MeetingRooms = &meetingRooms{app: app}
	return m
}

type building struct {
	app *lark.App
}
type country struct {
	app *lark.App
}
type district struct {
	app *lark.App
}
type freebusy struct {
	app *lark.App
}
type instance struct {
	app *lark.App
}
type room struct {
	app *lark.App
}
type summary struct {
	app *lark.App
}
type meetingRooms struct {
	app *lark.App
}

func (b *building) BatchGet(ctx context.Context, req *BuildingBatchGetReq, options ...lark.RequestOptionFunc) (*BuildingBatchGetResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/building/batch_get", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingBatchGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *building) BatchGetId(ctx context.Context, req *BuildingBatchGetIdReq, options ...lark.RequestOptionFunc) (*BuildingBatchGetIdResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/building/batch_get_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingBatchGetIdResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *building) Create(ctx context.Context, req *BuildingCreateReq, options ...lark.RequestOptionFunc) (*BuildingCreateResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/building/create", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *building) Delete(ctx context.Context, req *BuildingDeleteReq, options ...lark.RequestOptionFunc) (*BuildingDeleteResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/building/delete", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *building) List(ctx context.Context, req *BuildingListReq, options ...lark.RequestOptionFunc) (*BuildingListResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/building/list", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (b *building) Update(ctx context.Context, req *BuildingUpdateReq, options ...lark.RequestOptionFunc) (*BuildingUpdateResp, error) {
	rawResp, err := b.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/building/update", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &BuildingUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (c *country) List(ctx context.Context, options ...lark.RequestOptionFunc) (*CountryListResp, error) {
	rawResp, err := c.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/country/list", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, nil, options...)
	if err != nil {
		return nil, err
	}
	resp := &CountryListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *district) List(ctx context.Context, req *DistrictListReq, options ...lark.RequestOptionFunc) (*DistrictListResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/district/list", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DistrictListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (f *freebusy) BatchGet(ctx context.Context, req *FreebusyBatchGetReq, options ...lark.RequestOptionFunc) (*FreebusyBatchGetResp, error) {
	rawResp, err := f.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/freebusy/batch_get", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &FreebusyBatchGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *instance) Reply(ctx context.Context, req *InstanceReplyReq, options ...lark.RequestOptionFunc) (*InstanceReplyResp, error) {
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/instance/reply", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &InstanceReplyResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) BatchGet(ctx context.Context, req *RoomBatchGetReq, options ...lark.RequestOptionFunc) (*RoomBatchGetResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/room/batch_get", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomBatchGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) BatchGetId(ctx context.Context, req *RoomBatchGetIdReq, options ...lark.RequestOptionFunc) (*RoomBatchGetIdResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/room/batch_get_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomBatchGetIdResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) Create(ctx context.Context, req *RoomCreateReq, options ...lark.RequestOptionFunc) (*RoomCreateResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/room/create", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) Delete(ctx context.Context, req *RoomDeleteReq, options ...lark.RequestOptionFunc) (*RoomDeleteResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/room/delete", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) List(ctx context.Context, req *RoomListReq, options ...lark.RequestOptionFunc) (*RoomListResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/meeting_room/room/list", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (r *room) Update(ctx context.Context, req *RoomUpdateReq, options ...lark.RequestOptionFunc) (*RoomUpdateResp, error) {
	rawResp, err := r.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/room/update", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &RoomUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (s *summary) BatchGet(ctx context.Context, req *SummaryBatchGetReq, options ...lark.RequestOptionFunc) (*SummaryBatchGetResp, error) {
	rawResp, err := s.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/meeting_room/summary/batch_get", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &SummaryBatchGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
