// Package meeting_room code generated by lark suite oapi sdk gen
package meeting_room

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/v2"
)

type meetingRoomStatusChangedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRoomStatusChangedEvent) error
}

func (h *meetingRoomStatusChangedEventHandler) Event() interface{} {
	return &MeetingRoomStatusChangedEvent{}
}

func (h *meetingRoomStatusChangedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRoomStatusChangedEvent))
}

func (m *meetingRooms) StatusChangedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRoomStatusChangedEvent) error) {
	m.app.Webhook.EventHandler("status_changed", &meetingRoomStatusChangedEventHandler{handler: handler})
}

type meetingRoomCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRoomCreatedEvent) error
}

func (h *meetingRoomCreatedEventHandler) Event() interface{} {
	return &MeetingRoomCreatedEvent{}
}

func (h *meetingRoomCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRoomCreatedEvent))
}

func (m *meetingRooms) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRoomCreatedEvent) error) {
	m.app.Webhook.EventHandler("created", &meetingRoomCreatedEventHandler{handler: handler})
}

type meetingRoomDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRoomDeletedEvent) error
}

func (h *meetingRoomDeletedEventHandler) Event() interface{} {
	return &MeetingRoomDeletedEvent{}
}

func (h *meetingRoomDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRoomDeletedEvent))
}

func (m *meetingRooms) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRoomDeletedEvent) error) {
	m.app.Webhook.EventHandler("deleted", &meetingRoomDeletedEventHandler{handler: handler})
}

type meetingRoomUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *MeetingRoomUpdatedEvent) error
}

func (h *meetingRoomUpdatedEventHandler) Event() interface{} {
	return &MeetingRoomUpdatedEvent{}
}

func (h *meetingRoomUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*MeetingRoomUpdatedEvent))
}

func (m *meetingRooms) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *MeetingRoomUpdatedEvent) error) {
	m.app.Webhook.EventHandler("updated", &meetingRoomUpdatedEventHandler{handler: handler})
}

type roomCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *RoomCreatedEvent) error
}

func (h *roomCreatedEventHandler) Event() interface{} {
	return &RoomCreatedEvent{}
}

func (h *roomCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*RoomCreatedEvent))
}

func (r *room) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *RoomCreatedEvent) error) {
	r.app.Webhook.EventHandler("created", &roomCreatedEventHandler{handler: handler})
}

type roomDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *RoomDeletedEvent) error
}

func (h *roomDeletedEventHandler) Event() interface{} {
	return &RoomDeletedEvent{}
}

func (h *roomDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*RoomDeletedEvent))
}

func (r *room) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *RoomDeletedEvent) error) {
	r.app.Webhook.EventHandler("deleted", &roomDeletedEventHandler{handler: handler})
}

type roomStatusChangedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *RoomStatusChangedEvent) error
}

func (h *roomStatusChangedEventHandler) Event() interface{} {
	return &RoomStatusChangedEvent{}
}

func (h *roomStatusChangedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*RoomStatusChangedEvent))
}

func (r *room) StatusChangedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *RoomStatusChangedEvent) error) {
	r.app.Webhook.EventHandler("status_changed", &roomStatusChangedEventHandler{handler: handler})
}

type roomUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *RoomUpdatedEvent) error
}

func (h *roomUpdatedEventHandler) Event() interface{} {
	return &RoomUpdatedEvent{}
}

func (h *roomUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*RoomUpdatedEvent))
}

func (r *room) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *RoomUpdatedEvent) error) {
	r.app.Webhook.EventHandler("updated", &roomUpdatedEventHandler{handler: handler})
}
