// Package imv1 code generated by lark suite oapi sdk gen
package imv1

import (
	"bytes"
	"context"
	"github.com/larksuite/oapi-sdk-go/v2"
)

type Im struct {
	app      *lark.App
	Messages *MessageService
	Files    *FileService
}

func New(app *lark.App) *Im {
	s := &Im{
		app: app,
	}
	s.Messages = newMessageService(s)
	s.Files = newFileService(s)
	return s
}

type MessageService struct {
	service *Im
}

func newMessageService(service *Im) *MessageService {
	return &MessageService{
		service: service,
	}
}

type FileService struct {
	service *Im
}

func newFileService(service *Im) *FileService {
	return &FileService{
		service: service,
	}
}

func (messageService *MessageService) Create(ctx context.Context, req *MessageCreateReq,
	options ...lark.RequestOptionFunc) (*MessageCreateResp, error) {
	rawResp, err := messageService.service.app.SendRequestWithAccessTokenTypes(ctx, "POST",
		"/open-apis/im/v1/messages", req, []lark.AccessTokenType{lark.AccessTokenTypeTenant}, options...)
	if err != nil {
		return nil, err
	}

	messageCreateResp := &MessageCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(messageCreateResp)
	if err != nil {
		return nil, err
	}
	return messageCreateResp, err
}

func (fileService *FileService) Create(ctx context.Context, req *FileCreateReq,
	options ...lark.RequestOptionFunc) (*FileCreateResp, error) {
	options = append(options, lark.WithFileUpload())
	rawResp, err := fileService.service.app.SendRequestWithAccessTokenTypes(ctx, "POST",
		"/open-apis/im/v1/files", req, []lark.AccessTokenType{lark.AccessTokenTypeTenant}, options...)
	if err != nil {
		return nil, err
	}
	fileCreateResp := &FileCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(fileCreateResp)
	if err != nil {
		return nil, err
	}
	return fileCreateResp, err
}

func (fileService *FileService) Get(ctx context.Context, req *FileGetReq,
	options ...lark.RequestOptionFunc) (*FileGetResp, error) {
	rawResp, err := fileService.service.app.SendRequestWithAccessTokenTypes(ctx, "GET",
		"/open-apis/im/v1/files/:file_key", req, []lark.AccessTokenType{lark.AccessTokenTypeTenant}, options...)
	if err != nil {
		return nil, err
	}
	fileGetResp := &FileGetResp{RawResponse: rawResp}
	if rawResp.StatusCode == 200 {
		fileGetResp.File = bytes.NewBuffer(fileGetResp.RawBody)
		fileGetResp.FileName = lark.FileNameByHeader(fileGetResp.Header)
		return fileGetResp, err
	}
	err = rawResp.JSONUnmarshalBody(fileGetResp)
	if err != nil {
		return nil, err
	}
	return fileGetResp, err
}
