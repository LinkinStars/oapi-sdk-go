// Package image code generated by lark suite oapi sdk gen
package image

import (
	"bytes"
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type ImageService struct {
	Images *images
}

func New(app *lark.App) *ImageService {
	i := &ImageService{}
	i.Images = &images{app: app}
	return i
}

type images struct {
	app *lark.App
}

func (i *images) Get(ctx context.Context, req *ImageGetReq, options ...lark.RequestOptionFunc) (*ImageGetResp, error) {
	options = append(options, lark.WithFileDownload())
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/image/v4/get", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &ImageGetResp{RawResponse: rawResp}
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = lark.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (i *images) Put(ctx context.Context, req *ImagePutReq, options ...lark.RequestOptionFunc) (*ImagePutResp, error) {
	options = append(options, lark.WithFileUpload())
	rawResp, err := i.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/image/v4/put", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &ImagePutResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
