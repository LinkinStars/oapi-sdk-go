// Package contact code generated by lark suite oapi sdk gen
package contact

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type ContactService struct {
	Users             *users
	Departments       *departments
	Scopes            *scopes
	EmployeeTypeEnums *employeeTypeEnums
	CustomAttrs       *customAttrs
	Group             *group
	GroupMember       *groupMember
}

func New(app *lark.App) *ContactService {
	c := &ContactService{}
	c.Users = &users{app: app}
	c.Departments = &departments{app: app}
	c.Scopes = &scopes{app: app}
	c.EmployeeTypeEnums = &employeeTypeEnums{app: app}
	c.CustomAttrs = &customAttrs{app: app}
	c.Group = &group{app: app}
	c.GroupMember = &groupMember{app: app}
	return c
}

type users struct {
	app *lark.App
}
type departments struct {
	app *lark.App
}
type scopes struct {
	app *lark.App
}
type employeeTypeEnums struct {
	app *lark.App
}
type customAttrs struct {
	app *lark.App
}
type group struct {
	app *lark.App
}
type groupMember struct {
	app *lark.App
}

func (c *customAttrs) List(ctx context.Context, req *CustomAttrListReq, options ...lark.RequestOptionFunc) (*CustomAttrListResp, error) {
	rawResp, err := c.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/custom_attrs", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &CustomAttrListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Get(ctx context.Context, req *DepartmentGetReq, options ...lark.RequestOptionFunc) (*DepartmentGetResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/departments/:department_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) List(ctx context.Context, req *DepartmentListReq, options ...lark.RequestOptionFunc) (*DepartmentListResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/departments", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Patch(ctx context.Context, req *DepartmentPatchReq, options ...lark.RequestOptionFunc) (*DepartmentPatchResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/contact/v3/departments/:department_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentPatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Create(ctx context.Context, req *DepartmentCreateReq, options ...lark.RequestOptionFunc) (*DepartmentCreateResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/departments", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Delete(ctx context.Context, req *DepartmentDeleteReq, options ...lark.RequestOptionFunc) (*DepartmentDeleteResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/contact/v3/departments/:department_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Update(ctx context.Context, req *DepartmentUpdateReq, options ...lark.RequestOptionFunc) (*DepartmentUpdateResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/contact/v3/departments/:department_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Parent(ctx context.Context, req *DepartmentParentReq, options ...lark.RequestOptionFunc) (*DepartmentParentResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/departments/parent", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentParentResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (d *departments) Search(ctx context.Context, req *DepartmentSearchReq, options ...lark.RequestOptionFunc) (*DepartmentSearchResp, error) {
	rawResp, err := d.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/departments/search", []lark.AccessTokenType{lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &DepartmentSearchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnums) List(ctx context.Context, req *EmployeeTypeEnumListReq, options ...lark.RequestOptionFunc) (*EmployeeTypeEnumListResp, error) {
	rawResp, err := e.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/employee_type_enums", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &EmployeeTypeEnumListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnums) Create(ctx context.Context, req *EmployeeTypeEnumCreateReq, options ...lark.RequestOptionFunc) (*EmployeeTypeEnumCreateResp, error) {
	rawResp, err := e.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/employee_type_enums", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &EmployeeTypeEnumCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnums) Delete(ctx context.Context, req *EmployeeTypeEnumDeleteReq, options ...lark.RequestOptionFunc) (*EmployeeTypeEnumDeleteResp, error) {
	rawResp, err := e.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/contact/v3/employee_type_enums/:enum_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &EmployeeTypeEnumDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employeeTypeEnums) Update(ctx context.Context, req *EmployeeTypeEnumUpdateReq, options ...lark.RequestOptionFunc) (*EmployeeTypeEnumUpdateResp, error) {
	rawResp, err := e.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/contact/v3/employee_type_enums/:enum_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &EmployeeTypeEnumUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Create(ctx context.Context, req *GroupCreateReq, options ...lark.RequestOptionFunc) (*GroupCreateResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/group", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Simplelist(ctx context.Context, req *GroupSimplelistReq, options ...lark.RequestOptionFunc) (*GroupSimplelistResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/group/simplelist", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupSimplelistResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Delete(ctx context.Context, req *GroupDeleteReq, options ...lark.RequestOptionFunc) (*GroupDeleteResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/contact/v3/group/:group_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Get(ctx context.Context, req *GroupGetReq, options ...lark.RequestOptionFunc) (*GroupGetResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/group/:group_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *group) Patch(ctx context.Context, req *GroupPatchReq, options ...lark.RequestOptionFunc) (*GroupPatchResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/contact/v3/group/:group_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupPatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) Simplelist(ctx context.Context, req *GroupMemberSimplelistReq, options ...lark.RequestOptionFunc) (*GroupMemberSimplelistResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/group/:group_id/member/simplelist", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupMemberSimplelistResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) Add(ctx context.Context, req *GroupMemberAddReq, options ...lark.RequestOptionFunc) (*GroupMemberAddResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/add", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupMemberAddResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (g *groupMember) Remove(ctx context.Context, req *GroupMemberRemoveReq, options ...lark.RequestOptionFunc) (*GroupMemberRemoveResp, error) {
	rawResp, err := g.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/group/:group_id/member/remove", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &GroupMemberRemoveResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) Delete(ctx context.Context, req *UserDeleteReq, options ...lark.RequestOptionFunc) (*UserDeleteResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodDelete,
		"/open-apis/contact/v3/users/:user_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserDeleteResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) Update(ctx context.Context, req *UserUpdateReq, options ...lark.RequestOptionFunc) (*UserUpdateResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPut,
		"/open-apis/contact/v3/users/:user_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserUpdateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) Create(ctx context.Context, req *UserCreateReq, options ...lark.RequestOptionFunc) (*UserCreateResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/contact/v3/users", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserCreateResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) Patch(ctx context.Context, req *UserPatchReq, options ...lark.RequestOptionFunc) (*UserPatchResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPatch,
		"/open-apis/contact/v3/users/:user_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserPatchResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) Get(ctx context.Context, req *UserGetReq, options ...lark.RequestOptionFunc) (*UserGetResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/users/:user_id", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserGetResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (u *users) List(ctx context.Context, req *UserListReq, options ...lark.RequestOptionFunc) (*UserListResp, error) {
	rawResp, err := u.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/contact/v3/users", []lark.AccessTokenType{lark.AccessTokenTypeTenant, lark.AccessTokenTypeUser}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &UserListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
