// Package contact code generated by lark suite oapi sdk gen
package contact

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/v2"
)

type departmentCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *DepartmentCreatedEvent) error
}

func (h *departmentCreatedEventHandler) Event() interface{} {
	return &DepartmentCreatedEvent{}
}

func (h *departmentCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*DepartmentCreatedEvent))
}

func (d *departments) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *DepartmentCreatedEvent) error) {
	d.app.Webhook.EventHandler("contact.department.created_v3", &departmentCreatedEventHandler{handler: handler})
}

type departmentDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *DepartmentDeletedEvent) error
}

func (h *departmentDeletedEventHandler) Event() interface{} {
	return &DepartmentDeletedEvent{}
}

func (h *departmentDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*DepartmentDeletedEvent))
}

func (d *departments) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *DepartmentDeletedEvent) error) {
	d.app.Webhook.EventHandler("contact.department.deleted_v3", &departmentDeletedEventHandler{handler: handler})
}

type departmentUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *DepartmentUpdatedEvent) error
}

func (h *departmentUpdatedEventHandler) Event() interface{} {
	return &DepartmentUpdatedEvent{}
}

func (h *departmentUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*DepartmentUpdatedEvent))
}

func (d *departments) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *DepartmentUpdatedEvent) error) {
	d.app.Webhook.EventHandler("contact.department.updated_v3", &departmentUpdatedEventHandler{handler: handler})
}

type employeeTypeEnumActivedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *EmployeeTypeEnumActivedEvent) error
}

func (h *employeeTypeEnumActivedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumActivedEvent{}
}

func (h *employeeTypeEnumActivedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*EmployeeTypeEnumActivedEvent))
}

func (e *employeeTypeEnums) ActivedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *EmployeeTypeEnumActivedEvent) error) {
	e.app.Webhook.EventHandler("contact.employee_type_enum.actived_v3", &employeeTypeEnumActivedEventHandler{handler: handler})
}

type employeeTypeEnumCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *EmployeeTypeEnumCreatedEvent) error
}

func (h *employeeTypeEnumCreatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumCreatedEvent{}
}

func (h *employeeTypeEnumCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*EmployeeTypeEnumCreatedEvent))
}

func (e *employeeTypeEnums) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *EmployeeTypeEnumCreatedEvent) error) {
	e.app.Webhook.EventHandler("contact.employee_type_enum.created_v3", &employeeTypeEnumCreatedEventHandler{handler: handler})
}

type employeeTypeEnumDeactivatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *EmployeeTypeEnumDeactivatedEvent) error
}

func (h *employeeTypeEnumDeactivatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumDeactivatedEvent{}
}

func (h *employeeTypeEnumDeactivatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*EmployeeTypeEnumDeactivatedEvent))
}

func (e *employeeTypeEnums) DeactivatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *EmployeeTypeEnumDeactivatedEvent) error) {
	e.app.Webhook.EventHandler("contact.employee_type_enum.deactivated_v3", &employeeTypeEnumDeactivatedEventHandler{handler: handler})
}

type employeeTypeEnumDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *EmployeeTypeEnumDeletedEvent) error
}

func (h *employeeTypeEnumDeletedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumDeletedEvent{}
}

func (h *employeeTypeEnumDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*EmployeeTypeEnumDeletedEvent))
}

func (e *employeeTypeEnums) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *EmployeeTypeEnumDeletedEvent) error) {
	e.app.Webhook.EventHandler("contact.employee_type_enum.deleted_v3", &employeeTypeEnumDeletedEventHandler{handler: handler})
}

type employeeTypeEnumUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *EmployeeTypeEnumUpdatedEvent) error
}

func (h *employeeTypeEnumUpdatedEventHandler) Event() interface{} {
	return &EmployeeTypeEnumUpdatedEvent{}
}

func (h *employeeTypeEnumUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*EmployeeTypeEnumUpdatedEvent))
}

func (e *employeeTypeEnums) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *EmployeeTypeEnumUpdatedEvent) error) {
	e.app.Webhook.EventHandler("contact.employee_type_enum.updated_v3", &employeeTypeEnumUpdatedEventHandler{handler: handler})
}

type scopeUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *ScopeUpdatedEvent) error
}

func (h *scopeUpdatedEventHandler) Event() interface{} {
	return &ScopeUpdatedEvent{}
}

func (h *scopeUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*ScopeUpdatedEvent))
}

func (s *scopes) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *ScopeUpdatedEvent) error) {
	s.app.Webhook.EventHandler("contact.scope.updated_v3", &scopeUpdatedEventHandler{handler: handler})
}

type userCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *UserCreatedEvent) error
}

func (h *userCreatedEventHandler) Event() interface{} {
	return &UserCreatedEvent{}
}

func (h *userCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*UserCreatedEvent))
}

func (u *users) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *UserCreatedEvent) error) {
	u.app.Webhook.EventHandler("contact.user.created_v3", &userCreatedEventHandler{handler: handler})
}

type userDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *UserDeletedEvent) error
}

func (h *userDeletedEventHandler) Event() interface{} {
	return &UserDeletedEvent{}
}

func (h *userDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*UserDeletedEvent))
}

func (u *users) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *UserDeletedEvent) error) {
	u.app.Webhook.EventHandler("contact.user.deleted_v3", &userDeletedEventHandler{handler: handler})
}

type userUpdatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *UserUpdatedEvent) error
}

func (h *userUpdatedEventHandler) Event() interface{} {
	return &UserUpdatedEvent{}
}

func (h *userUpdatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*UserUpdatedEvent))
}

func (u *users) UpdatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *UserUpdatedEvent) error) {
	u.app.Webhook.EventHandler("contact.user.updated_v3", &userUpdatedEventHandler{handler: handler})
}
