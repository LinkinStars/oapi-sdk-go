// Package ehr code generated by lark suite oapi sdk gen
package ehr

import (
	"bytes"
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type EhrService struct {
	Attachments *attachments
	Employees   *employees
}

func New(app *lark.App) *EhrService {
	e := &EhrService{}
	e.Attachments = &attachments{app: app}
	e.Employees = &employees{app: app}
	return e
}

type attachments struct {
	app *lark.App
}
type employees struct {
	app *lark.App
}

func (a *attachments) Get(ctx context.Context, req *AttachmentGetReq, options ...lark.RequestOptionFunc) (*AttachmentGetResp, error) {
	options = append(options, lark.WithFileDownload())
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/ehr/v1/attachments/:token", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AttachmentGetResp{RawResponse: rawResp}
	if rawResp.StatusCode == http.StatusOK {
		resp.File = bytes.NewBuffer(rawResp.RawBody)
		resp.FileName = lark.FileNameByHeader(rawResp.Header)
		return resp, err
	}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (e *employees) List(ctx context.Context, req *EmployeeListReq, options ...lark.RequestOptionFunc) (*EmployeeListResp, error) {
	rawResp, err := e.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/ehr/v1/employees", []lark.AccessTokenType{lark.AccessTokenTypeTenant}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &EmployeeListResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
