// Package calendar code generated by lark suite oapi sdk gen
package calendar

import (
	"context"
	"github.com/larksuite/oapi-sdk-go/v2"
)

type calendarChangedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *CalendarChangedEvent) error
}

func (h *calendarChangedEventHandler) Event() interface{} {
	return &CalendarChangedEvent{}
}

func (h *calendarChangedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*CalendarChangedEvent))
}

func (c *calendars) ChangedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *CalendarChangedEvent) error) {
	c.app.Webhook.EventHandler("changed", &calendarChangedEventHandler{handler: handler})
}

type calendarAclCreatedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *CalendarAclCreatedEvent) error
}

func (h *calendarAclCreatedEventHandler) Event() interface{} {
	return &CalendarAclCreatedEvent{}
}

func (h *calendarAclCreatedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*CalendarAclCreatedEvent))
}

func (c *calendarAcls) CreatedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *CalendarAclCreatedEvent) error) {
	c.app.Webhook.EventHandler("created", &calendarAclCreatedEventHandler{handler: handler})
}

type calendarAclDeletedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *CalendarAclDeletedEvent) error
}

func (h *calendarAclDeletedEventHandler) Event() interface{} {
	return &CalendarAclDeletedEvent{}
}

func (h *calendarAclDeletedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*CalendarAclDeletedEvent))
}

func (c *calendarAcls) DeletedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *CalendarAclDeletedEvent) error) {
	c.app.Webhook.EventHandler("deleted", &calendarAclDeletedEventHandler{handler: handler})
}

type calendarEventChangedEventHandler struct {
	handler func(context.Context, *lark.RawRequest, *CalendarEventChangedEvent) error
}

func (h *calendarEventChangedEventHandler) Event() interface{} {
	return &CalendarEventChangedEvent{}
}

func (h *calendarEventChangedEventHandler) Handle(ctx context.Context, req *lark.RawRequest, event interface{}) error {
	return h.handler(ctx, req, event.(*CalendarEventChangedEvent))
}

func (c *calendarEvents) ChangedEventHandler(handler func(ctx context.Context, req *lark.RawRequest, event *CalendarEventChangedEvent) error) {
	c.app.Webhook.EventHandler("changed", &calendarEventChangedEventHandler{handler: handler})
}
