// Package authen code generated by lark suite oapi sdk gen
package authen

import (
	"context"
	"net/http"

	"github.com/larksuite/oapi-sdk-go/v2"
)

type AuthenService struct {
	Authen *authen
}

func New(app *lark.App) *AuthenService {
	a := &AuthenService{}
	a.Authen = &authen{app: app}
	return a
}

type authen struct {
	app *lark.App
}

func (a *authen) AccessToken(ctx context.Context, req *AuthenAccessTokenReq, options ...lark.RequestOptionFunc) (*AuthenAccessTokenResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/authen/v1/access_token", []lark.AccessTokenType{lark.AccessTokenTypeApp}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AuthenAccessTokenResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *authen) RefreshAccessToken(ctx context.Context, req *AuthenRefreshAccessTokenReq, options ...lark.RequestOptionFunc) (*AuthenRefreshAccessTokenResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodPost,
		"/open-apis/authen/v1/refresh_access_token", []lark.AccessTokenType{lark.AccessTokenTypeApp}, req, options...)
	if err != nil {
		return nil, err
	}
	resp := &AuthenRefreshAccessTokenResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
func (a *authen) UserInfo(ctx context.Context, options ...lark.RequestOptionFunc) (*AuthenUserInfoResp, error) {
	rawResp, err := a.app.SendRequestWithAccessTokenTypes(ctx, http.MethodGet,
		"/open-apis/authen/v1/user_info", []lark.AccessTokenType{lark.AccessTokenTypeUser}, nil, options...)
	if err != nil {
		return nil, err
	}
	resp := &AuthenUserInfoResp{RawResponse: rawResp}
	err = rawResp.JSONUnmarshalBody(resp)
	if err != nil {
		return nil, err
	}
	return resp, err
}
